<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Xss | Getting De-railed]]></title>
  <link href="http://annaershova.github.io/blog/categories/xss/atom.xml" rel="self"/>
  <link href="http://annaershova.github.io/"/>
  <updated>2015-10-27T20:43:40-04:00</updated>
  <id>http://annaershova.github.io/</id>
  <author>
    <name><![CDATA[Anna Ershova]]></name>
    <email><![CDATA[anna.ershova@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSRF Part II -- CSRF vs. XSS]]></title>
    <link href="http://annaershova.github.io/blog/2015/10/25/csrf-part-ii-csrf-vs-xss/"/>
    <updated>2015-10-25T18:03:57-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/10/25/csrf-part-ii-csrf-vs-xss</id>
    <content type="html"><![CDATA[<p>I touched upon CSRF (cross-site request forgery) in my <a href="http://annaershova.github.io/blog/2015/10/25/whats-csrf-and-what-exactly-are-we-are-protecting-from-forgery-in-controllers/">previous blog post</a>, but as I was mentionining that it is distinct from XSS since the two get mixed up sometimes (must be the multi-fricative-consonant abbreviation), I realized that I should discuss it in greater detail.</p>

<hr />

<p><strong>Web Attack Types Vulnerabilities: Gotta Catch &lsquo;Em All</strong></p>

<p>Both XSS abd CSRF are types of web attacks (there are more than these two, but I have seen people get them confused, and they do have interesting parallels). XSS is <em>cross-site scripting</em>. CSRF, as previously mentioned, is <em>cross-side request forgery</em>.</p>

<p><strong>The fundamental conceptual difference between CSRF and XSS is that CSRF exploits a website&rsquo;s trust (authentication) of a user, whereas XSS exploits a user&rsquo;s trust for a website.</strong></p>

<hr />

<p><strong>XSS: The Mechanics</strong></p>

<p>XSS involves injecting malicious scripts (in the case of Rails, it would usually be JavaScript, potentially combined with HTML, often with a <strong><code>&lt;script&gt;</code></strong> tag) into a webpage. That script can be then executed when other users access the website.</p>

<p>For instance, a hacker introduces some JavaScript to the comments section of a webpage, and when other users try to access it, the script is executed and, say, the user is re-directed to a porn website they otherwise from their original destination S.H.I.E.L.D. subreddit.</p>

<p>XSS attacks are incredibly common and easy to execute if a website does not have appropriate security features.</p>

<hr />

<p><strong>XSS and Ruby on Rails: Opting Out of HTML Escape</strong></p>

<p>As with CSRF, Rails comes with a reasonably strong protection against XSS attacks. That certainly makes life easier for most beginners who want to have a reasonably secure website without spending too much time researching security and focusing on building other skills first.</p>

<p>The idea behind Rails XSS protection is automatically sanitizing user input so that nothing gets executed as a script if it&rsquo;s not meant to be. Back in the day, that had to be done manually, which, was extremely time-consuming and error-prone. So Rails 3 incorporated a simple idea: opting out of html escaping instead of opting in, if need be.</p>

<p>It accomplished that by integrating <strong><code>RailsXss</code></strong> <a href="https://github.com/rails/rails_xss">plugin</a>, and the feature <a href="https://github.com/rails/rails/commit/9415935902f120a9bac0bfce7129725a0db38ed3">became part of Edge Rails</a> as early as <a href="http://weblog.rubyonrails.org/2009/10/12/what-s-new-in-edge-rails/">October 2009</a> (see more on Edge Rails in my post <a href="http://annaershova.github.io/blog/2015/10/11/running-edge-rails-living-dangerously/">here</a> ).</p>

<p>Rails 3+ officially supports this feature, and it backports to earlier versions of Rails as well.</p>

<p>I noticed from reading <a href="https://github.com/rails/rails/blob/4-2-stable/activesupport/lib/active_support/core_ext/string/output_safety.rb">source code</a> that Rails now assumes that no string input is <strong><code>html_safe?</code></strong> by default, while integers are:</p>

<p><img class="center" src="/images/object_vs_numeric.png"></p>

<p>This is what it looks like in Rails console:</p>

<p><img class="center" src="/images/html_safe_int.png"></p>

<p>Html escape it can be still done manually with an <a href="http://api.rubyonrails.org/classes/ERB/Util.html#method-c-html_escape"><strong><code>html_escape</code></strong></a> in front of whatever you are rendering within the erb tags.</p>

<p><strong><code>html_escape</code></strong> can be also aliased as <strong><code>h</code></strong>, and it is fine to use it even if something is getting html escaped by default as Rails will recognize it as such and will only escape it once.</p>

<p>See example from <a href="https://github.com/rails/rails/blob/4-2-stable/activesupport/lib/active_support/core_ext/string/output_safety.rb">source code</a>:</p>

<p><img class="center" src="/images/html_escape.png"></p>

<p>The potentially &lsquo;dangerous&rsquo; charactaters are converted into their human-readable equivalents as the same source code indicates:</p>

<p><strong><code>HTML_ESCAPE = { '&amp;' =&gt; '&amp;amp;',  '&gt;' =&gt; '&amp;gt;',   '&lt;' =&gt; '&amp;lt;', '"' =&gt; '&amp;quot;', "'" =&gt; '&amp;#39;' }</code></strong></p>

<p>Similarily, <a href="https://github.com/rails/rails/blob/4-2-stable/activesupport/lib/active_support/core_ext/string/output_safety.rb"><strong><code>html_escape_once</code></strong></a> escapes HTML code without affecting existing escaped code:</p>

<p><img class="center" src="/images/escape_once.png"></p>

<p>If you do not want user input to be sanitized, then using <strong><code>raw</code></strong> in the erb template is the way to go, e.g.:</p>

<p><img class="center" src="/images/rawxss.png"></p>

<hr />

<p><strong>If That Were Not Enough</strong></p>

<p><a href="https://en.wikipedia.org/wiki/Cross-site_scripting">Wikipedia article</a> is a good starting point.</p>

<p>This <a href="http://railscasts.com/episodes/204-xss-protection-in-rails-3?autoplay=true">Railscast episode</a> is worth spending 8 minutes on, even though it is a bit older.</p>

<p>And as usual, more on XSS on the <a href="http://guides.rubyonrails.org/security.html#cross-site-scripting-xss">Rails Guides</a> website.</p>
]]></content>
  </entry>
  
</feed>
