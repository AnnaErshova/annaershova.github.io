<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: flatiron | Anna's Blog]]></title>
  <link href="http://annaershova.github.io/blog/categories/flatiron/atom.xml" rel="self"/>
  <link href="http://annaershova.github.io/"/>
  <updated>2015-08-08T19:19:18-04:00</updated>
  <id>http://annaershova.github.io/</id>
  <author>
    <name><![CDATA[Anna Ershova]]></name>
    <email><![CDATA[anna.ershova@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Project Mode -- Week 1, Day 2]]></title>
    <link href="http://annaershova.github.io/blog/2015/07/29/project-mode-week-1/"/>
    <updated>2015-07-29T11:08:32-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/07/29/project-mode-week-1</id>
    <content type="html"><![CDATA[<p>&hellip;and we are officially in Project Mode here at the Flatiron School, working on project 1 of 2, which is meant to be a short project to be conceptualized, pitched, designed, built, and presented within a scope of 5 business days.</p>

<p><a href="https://youtu.be/7fx6AknguzI">Here</a> is a very short video showcasing functionality that we have built in 2 days. We have deployed to Heroku since the video was made, which turned out to be much easier than expected, minus some fiddling with the Figaro gem.)</p>

<p>Primary goal right now is to make it aesthetically pleasing.</p>

<p>It looks fairly simple, but it actually features some pretty advanced weather-related logic. Who would have thought that energy trading background would come in handy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On a Scale of Dalai Lama to Kanye West, How Narcissistic Are You? A Rails App That Lets You Find Out Just That.]]></title>
    <link href="http://annaershova.github.io/blog/2015/07/26/twitter-sentiment-analysis-rails-app/"/>
    <updated>2015-07-26T09:32:26-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/07/26/twitter-sentiment-analysis-rails-app</id>
    <content type="html"><![CDATA[<p>For a small side project to be shared with our Flatiron School classmates and some <a href="http://www.meetup.com/Flatiron-School-Presents/">Flatiron School Presents Meetup</a> guests, my partner Mitch and I decided to build an app that measures people&rsquo;s narcissism levels via their Twitter feed. A linguistic analysis-baased social insights algorithm, if you will.</p>

<p><img class="center" src="/images/kanye-meme.png"></p>

<p>(meme taken from <a href="http://knowyourmeme.com/photos/688363-kanye-west">here</a> &ndash; spoiler alert for celebrities' narcissism levels)</p>

<p>Much has been said and done and invested into when it comes to social media sentiment analysis in finance, with many financial institutions investing heavily in it. A cursory Google search offers up names of many start-ups involved in mining, mapping, analyzing, and plain having fun with Twitter. We figured that as tech professionals, working with social media and building a fun prototype for understanding the tools and the medium is a valuable experience.</p>

<p>Our original idea was parsing through people&rsquo;s Instagram feed to see how many posted photos were selfies for a better narcissism indicator, but considering advanced facial recognizition technology needed and the fact it was meant to be a small side project executed while carrying on a full school work load, we have settled on the twitter-based project.</p>

<p>The <a href="https://github.com/sferik/twitter">Twitter gem</a> made working with Twitter a breeze, although there were limitations for how many posts could be parsed through at once and of course the max number of timeout requests every minute.</p>

<p>We designed everything through the use of good ol' Rails New NarcissismProject. We had one user model that we worked with.</p>

<p>The front page invites a user to check how narcissistic the are by entering a twitter handle (which will work whether or not prefixed with an @ to make user&rsquo;s life easier; we have also allowed for the first or last typed character to be blank space in case a user is very space-key-trigger-happy; other than that, the handle has to follow Twitter rules as ensured by a RegEx check):</p>

<p><img class="center" src="/images/narcissism-app-front-page.png"></p>

<p>Once a user enters a twitter handle, it parses their feed for key narcissism-related words that we have pre-determined in the app; it then checks it against a scale of celebrities. It then returns user&rsquo;s score and their celebrity match (mine is Flatiron School&rsquo;s very own <a href="https://twitter.com/aviflombaum">Avi Flombaum</a>)</p>

<p>We don&rsquo;t share the celbrity scale on the app, as it is more fun for the user to discover it him/herself. To built it, we have parsed through the top 100 most-followed twitter accounts (most of which are individual celebrities) and some more and scored them. We then picked some representatives for each scale gradation, throwing in a few Flatiron School-related Easter Eggs, just for fun. If this was a commercial product, we would have to update the celebrity scale just in case some of them go into narcissism rehab or new self-loving celebrities merger.</p>

<p>Most of our findings were unsurprising: Dalai Lama and the Pope were at the very bottom (with Dalai Lama being slightly less narcissistic and thus representing no. 1 on our scale); Kanye West was 9 out of 10 (beat only by the likes of Lena Dunham); Mr. West was closely followed by Kim Kardashian in the 8th place. To me, this means that are simplistic prototype algorithm actually works!</p>

<p>I stopped to pondered if it is unethical to make fun of people&rsquo;s narcissism levels, but considering the celeberities that came up on top and their interest in self-promotion, I figured out their high tankings it would be quite a compliment to them (I am really, really tempted to tweet Mr. West and ask him how he feels about being outdone by Ms Dunham).</p>

<p>What turned out to be incredibly fun was soliciting our friends' and classmates' twitter handles and checking their narcissism levels. A few were truly off-the-charts! (We even had to design more model logic for those cases) The top 10 narcissistic twitter handles are then saved separately and published on the Top 10 page &ndash; with many people I know outdoing our celebrities of choice. Uh oh.</p>

<p>A short demo video can be found <a href="http://youtu.be/T_tTweOvDqs">here</a> &ndash; YouTube link.</p>

<p>And here is a link to the Github <a href="https://github.com/mitchellhart/twitter_analyzer">repo</a>.</p>

<p>I will update this post once the app actually goes live as is our goal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Rotate a Matrix in Ruby]]></title>
    <link href="http://annaershova.github.io/blog/2015/07/22/how-to-rotate-a-matrix-in-ruby/"/>
    <updated>2015-07-22T17:58:06-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/07/22/how-to-rotate-a-matrix-in-ruby</id>
    <content type="html"><![CDATA[<p>Here is a problem that I recently stumbled upon while researching something completely different, as these things usually go, &ndash; and down the rabbit hole I went.</p>

<p>How does one rotate a matrix?</p>

<p>First of all, let&rsquo;s define parameters of the exercise. We will take a matrix &ndash; an array of arrays &ndash; and turn it 90&deg; clockwise.</p>

<p>So this is what it would look like, using Flatiron&rsquo;s whiteboard table tops (we are really a paper-free school):</p>

<p><img class="center" src="/images/matrix-rotation-example.png"></p>

<p>As you can see, numbers 1 (position[0][0] in zero-indexed terms) and 9 (position [2][2]) traded places. One thing is immediately obvious: this would only work if the matrix in question is &lsquo;square&rsquo;: that is, if there are x many rows with x many elements each.</p>

<p>Now that we have defined that condition, let&rsquo;s start with a simple 3x3 matrix.</p>

<p>If the original array looks like this, Ruby-style:</p>

<blockquote><p>my_array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</p></blockquote>

<p>The modified array would look like this:</p>

<blockquote><p>rotated_array = [[7, 4, 1], [8, 5, 2], [9, 6, 3]]</p></blockquote>

<p>But how to get there?</p>

<p>Ruby actually comes with default methods that allow one to manipulate arrays. Most people know <em>pop</em>, <em>shift</em>, <em>unshift</em>, and <em>drop</em>, but there are way more useful methods.</p>

<p>I was only marginally familiar with <em>rotate</em>, so here is an example:</p>

<p>According to the <a href="http://ruby-doc.org/core-2.2.2/Array.html#method-i-rotate">docs</a>:</p>

<blockquote><p>Returns a new array by rotating self so that the element at count is the first element of the new array.</p></blockquote>

<p>When using it without an argument (or rather with the default count of 1), it works like this:</p>

<p><img class="center" src="/images/rotate_simple_example.png"></p>

<p>It effectively takes the first part of the array and places it at the end of the array. If we use that 5 times on the array with 5 elements, we will arrive at the original array (well, it will return what looks like the original array as the original array does not get modified).</p>

<p>If used with a count that is not 1, it will move the elements down by the count number of places:</p>

<p><img class="center" src="/images/rotate_example_with_count2.png"></p>

<p>(array.rotate(2) is the same as <em>array.rotate.rotate</em>)</p>

<p>Count can also be negative, in which case it will rotate the array in the opposite direction, taking items from the end of the array and placing them in the front:</p>

<p><img class="center" src="/images/rotate-example-count-negative.png"></p>

<p>As many other methods, it can be used with the bang to modify the original array: <em>return!</em></p>

<p>I played around with <em>rotate</em>, and it became clear that I was going to need something else to complete the task:</p>

<p><img class="center" src="/images/rotate-example.png"></p>

<p>It handily re-arranged the nested components in the array, moving each &lsquo;inner&rsquo; array over by 1 at a time.</p>

<p>There is also <a href="http://apidock.com/ruby/Array/transpose">transpose</a>. It is actually a bit trickier to comprehend:</p>

<p><img class="center" src="/images/transpose-simple-example.png"></p>

<p>For a nested array that contains 2 array of 2 elements each, it seems like all it does is switch elements that are in the [1][0] and [0][1] position with each other &ndash; in case below, only 2 and 3 traded places. But what is actually does, as becomes more obvious in case of a larger array (nexted with 3 arrays of 3 elements each) is make columns rows and rows columns.</p>

<p>Here is an example:</p>

<p><img class="center" src="/images/transpose-example.png"></p>

<p>Unlike <em>rotate</em>, <em>transpose</em> does not take any arguments.</p>

<p>By the way, although I won&rsquo;t be using it here, one of my favorite array methods is also <em>flatten</em>, which is a handy way to get nesting out of arrays:</p>

<p><img class="center" src="/images/flatten-example.png"></p>

<p>As an aside, <em>flatten</em> is is also a handy way of converting a hash into a simple array:</p>

<p><img class="center" src="/images/hash-flatten-example.png"></p>

<p>But back to the task at hand:</p>

<p>Upon experimenting with <em>rotate</em>, <em>flatten</em>, and <em>transpose</em>, I think I came up with a pretty efficient technique using <em>transpose</em> and then <em>reverse</em>:</p>

<p><img class="center" src="/images/rotation-execution-example.png"></p>

<p>The array is first transposed and then iterated over, and each of the nexted arrays inside it is reversed.</p>

<p>Works like a charm. But if you want to do something slightly more exciting:</p>

<p>Let&rsquo;s look at the origin array again:</p>

<blockquote><p>my_array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</p></blockquote>

<p>And at the rotated_array:</p>

<blockquote><p>rotated_array = [[7, 4, 1], [8, 5, 2], [9, 6, 3]]</p></blockquote>

<p>For a zero-indexed language, the nested array will look like this, positions-wise:</p>

<p>[6,3,0]<br>
[7,4,1]<br>
[8,5,2]<br></p>

<p>OR:</p>

<p>(position of first element (0 in this case) + 2*3) + (position of first element + 3*1 ) + (position of first element + 3*0)
(position of second element + 2*3) + (position of first element + 3*1 ) + (position of second element + 3*0)
(position of third element + 2*3) + (position of third element + 3*1 ) + (position of third element + 3*0)</p>

<p>Or for a nested array:</p>

<p>[[2][0],[1][0],[0][0]],<br>
[[2][1],[1][1],[0][1]],<br>
[[2][2],[1][2],[0][2]]<br></p>

<p>Which is:</p>

<p>[[my_array.length-1][my_array.length-3],[my_array.length-2][my_array.length-3],[my_array.length-3][my_array.length-3]],<br>
[[my_array.length-1][my_array.length-2],[my_array.length-2][my_array.length-2],[my_array.length-3][my_array.length-2]],<br>
[[my_array.length-1][my_array.length-1],[my_array.length-2][my_array.length-1],[my_array.length-3][my_array.length-1]]<br></p>

<p>This would be a cool structure to use if pushing things into the array (I am using absolute positions instead of array.length-related as it is easier in this example):</p>

<p><img class="center" src="/images/pushing-into-rotated-array.png"></p>

<p>(as you can see I made a typo and then fixed it)</p>

<p>All you need to do thereafter is convert it into a nested array.</p>

<p>You can also do a chain of push statements:</p>

<p><img class="center" src="/images/push-chain.png"></p>

<p>All of these are pretty fun solutions to the problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RegEx Is Just Like Mandarin Chinese]]></title>
    <link href="http://annaershova.github.io/blog/2015/07/21/regex-is-just-like-mandarin-chinese/"/>
    <updated>2015-07-21T08:26:33-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/07/21/regex-is-just-like-mandarin-chinese</id>
    <content type="html"><![CDATA[<p>When I was in primary school in Russia, we had an intro to computer science class that taught up the basics of programming to produce good post-Communist STEM-oriented comrades. It used Basic to teach the fundamentals. As I spoke no English at the time, I spent more time memorizing words like GOTO and GOSUB than actually figuring out coding logic.</p>

<p>English speakers have a very distinct advantage when it comes to programming in most languages: we know all the words already. One doesn&rsquo;t even have to be an actual native speaker: Ruby was famously written by a Japanese programmer.</p>

<p>Whether a native speaker or not, it is a lot easier to memorize certain methods in Ruby (see: any?; none?; all?) when one actually understands how to use those words in a sentence.</p>

<p>Learning to code is comparable to learning a foreign language: a large part of it is comprehending the principles and then complementing it with memorizing quirks of grammar.</p>

<p>I compared SQL to German in class before. German is a very structured language where sentences have to be built and organized a very certain way, just like SQL.</p>

<p>Compare that to an Eastern European language, where we take major liberties with positioning words in a sentence. I used to tutor Russian as an undergrad at Yale; I remember students coming to me panicking because they could not figure out why subjects and objects were creatively arranged in a sentence and what to do about it. All I could say at the time is they were lucky because they did not learn Ukrainian, which has same creativity, by more complex grammar.</p>

<p>Ruby feels like an Eastern European language to me &ndash; there are many ways to write code, but there are still very specific &lsquo;grammar&rsquo; rules one needs to follow to make code &lsquo;grammatically correct.&rsquo; The stakes of course are differnet: while one can make oneself understood and convery the message well in broken Russian, Ruby won&rsquo;t run broken code at all or run it incorrectly.</p>

<p>Here is the problem with RegEx: it is just like Mandarin Chinese. Judging by the number of desperate, hate-filled posts on StackOverflow, it is as hard to learn.</p>

<p>Mandarin Chinese, and most its other dialects of Chinese actually have no well-developed grammar. There are ways to structure sentences, but there are no 7 cases of Ukrainian or 12 tenses of English. Past tense is barely denoted, yet alone formed in a miriad ways that hapless students of Germanic languages spend years memorizing.</p>

<p>When I first started Ruby, I routinely had to spend a fair bit of time ensuring I had an appropriate number of &lsquo;end&rsquo; key words: one to end an if statement, one to end a do block, one to end a method, one to end a class&hellip; That&rsquo;s a lot of &lsquo;grammar&rsquo; to learn &ndash; but at least we all know what the word &lsquo;end&rsquo; means, so that makes it easier. With RegEx, you have to poke around various seemingly randomly assigned symbols and hope that they work. Just like with Mandarin, half the time you are hoping you are refering to the correct character that has no real linguistic content and that you are using it correctly.</p>

<p>For a project in class, I had to write the following expression to validate a potential twitter handle: /^[A-Za-z0-9<em>]{1,15}|^@[A-Za-z0-9</em>]{1,15}/. It&rsquo;s not technically that difficult, but who decided that ^ stands for start of line? Or that $, for that matter, stands for end of line? Or that &lsquo;a?&rsquo;&lsquo; means zero or more of soemthing?</p>

<p>There might be some internal logic to it, just like with Chinese (vestiges of old-school computer science perhaps?), but for a modern-day person without much linguistic&hellip;I mean computer science background, it is not intuitive.</p>

<p>On top of that, to use RegEx is like writing an application without a good test suite: you think that you have thought of everything, but there is always that one edge case that can pop up and screw it over. I felt like that when learning Mandarin: something always pops up where the word has a diferent meaning or is really meant to be used with a different character to really &lsquo;work.&rsquo;</p>

<p>The good news is that both RegEx and Mandarin are possible to master. Perseverance and a healthy amount of grunt work is key. But just like Mandarin is handy for freaking out Chinese restaurant employees and nail salon workers, RegEx is handy too &ndash; in fact, it might have a greater utility of being used oftenf or the rest of one&rsquo;s Web Development career.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Don't Like Semicolons]]></title>
    <link href="http://annaershova.github.io/blog/2015/07/17/why-ruby-is-not-javascript/"/>
    <updated>2015-07-17T20:40:56-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/07/17/why-ruby-is-not-javascript</id>
    <content type="html"><![CDATA[<p>So I started learning Javascript.</p>

<p>They say that once you understand basic coding principles, learning a new programming language is mostly a matter of figuring out syntax and getting used to whatever special tricks that language has to offer. It certainly seems to be the case with this Ruby to JS transition.</p>

<p>But I certainly miss the syntactic sugar that Ruby gives us &ndash; and what is with all the curly brackets and the semicolons?!</p>

<p>Consider Project Euler Problem I (summing up multiples of 3 and 5 from 1 to 999).</p>

<p>There is just so much we can do with it in Ruby:</p>

<p><img class="center" src="/images/projecteulerp1ruby.png"></p>

<p>And here comes JavaScript:</p>

<p><img class="center" src="/images/projecteuler1js.png"></p>

<p>But just like mastering a foreign language that allows one to express oneself in a new and expanded way (as an example, google &lsquo;toska&rsquo; and &lsquo;Nabokov&rsquo; &ndash; Russians take melancholy to a whole new level that does not exist in any other language), JavaScript offers something pretty cool: <em>for (var x = 0; x &lt; 1000; x++)</em> &ndash; now that is one handy way to guide one&rsquo;s iteration. I sort of wish Ruby had that&hellip;</p>

<p>But for now, I need a T-shirt that says &lsquo;I don&rsquo;t really like semicolons.&rsquo;</p>
]]></content>
  </entry>
  
</feed>
