<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Global | Getting De-railed]]></title>
  <link href="http://annaershova.github.io/blog/categories/global/atom.xml" rel="self"/>
  <link href="http://annaershova.github.io/"/>
  <updated>2015-11-03T08:37:20-05:00</updated>
  <id>http://annaershova.github.io/</id>
  <author>
    <name><![CDATA[Anna Ershova]]></name>
    <email><![CDATA[anna.ershova@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Global Variables in Ruby]]></title>
    <link href="http://annaershova.github.io/blog/2015/10/26/variable-in-ruby/"/>
    <updated>2015-10-26T19:02:49-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/10/26/variable-in-ruby</id>
    <content type="html"><![CDATA[<hr />

<p><strong>Variables in Ruby and Their Scope:</strong></p>

<p>There are four major kinds of variables in Ruby, like in most object-oriented languages:</p>

<ul>
<li><strong>Global</strong></li>
<li><strong>Local</strong></li>
<li><strong>Instance</strong></li>
<li><strong>Class</strong></li>
</ul>


<p>There are also special variables such as <strong><code>self</code></strong> or <strong><code>nil</code></strong>, and of course, one can classify constants as a kind of a variable.</p>

<p>In this post, I want to talk about global variables, which, as the name implies, are stored globally and have global implications.</p>

<p>All variables in Ruby outside of locals ones are indicated with a sigil (a prefix that denotes variable scope): <strong><code>@</code></strong> for instance variables, <strong><code>@@</code></strong> for class variables, and <strong><code>$</code></strong> for global variables.</p>

<p>Since Ruby is a dynamically typed language, interpreter will determine data type of each and every variable when it is being assigned; there is no need to define each variable&rsquo;s data type when introducing it (so no need to type keyword <strong><code>global</code></strong> like in PHP).</p>

<p>If you specify a global variable, but not initialize it, it will return a <strong><code>nil</code></strong> pseudo-variable:</p>

<p><img class="center" src="/images/global_var_assignment.png"></p>

<hr />

<p><strong>The Problem with Using Global variables:</strong></p>

<p>Global variables are incredibly easy to use (<em>I see sooo many games of Tic Tac Toe with global variables written by Ruby beginners</em>), but also quite easy to abuse as they cane be accessed from within anywhere in your code even though the code refers to two separate classes:</p>

<p><img class="center" src="/images/global_variable_ill.png"></p>

<p>Global variables violate the principle of <a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming">encapsulation</a>) by allowing one part of your code to modify another part of your code without an explicitly defined interface. Over-using them probably means that app was not thoroughly thought out.</p>

<hr />

<p><strong>When to Use Global variables: Pre-defined Global Variables</strong></p>

<p>Even though global variables are generally considered to be un-Ruby-esque, Ruby does include a number of useful global variables (largely a Perl legacy) with a  <strong><code>$</code></strong> followed by a single character or a word that have a pre-defined meaning.</p>

<p>Below is just a selection of those, see a full list in <a href="http://ruby-doc.org/core-2.0.0/doc/globals_rdoc.html">Ruby docs</a> or by running <strong><code>$global_variables</code></strong>:</p>

<p><img class="center" src="/images/global_variables.png"></p>

<p>Similarily, you can run  <strong><code>self.instance_variables</code></strong> on an class instance, or  <strong><code>Class.class_variables</code></strong> on a class.)</p>

<ul>
<li><strong><code>$0</code></strong> &ndash; contains the name of the script being executed. Is assignable.</li>
</ul>


<p><img class="center" src="/images/$0.png"></p>

<ul>
<li><strong><code>$0</code></strong> &ndash; current line number of last line from input.</li>
</ul>


<p><img class="center" src="/images/$dot.png"></p>

<ul>
<li><strong><code>$:</code></strong> &ndash; same as <strong><code>$LOAD_PATH</code></strong>, shows load path:</li>
</ul>


<p><img class="center" src="/images/load_path.png"></p>

<ul>
<li><strong><code>$$</code></strong> &ndash; shows process ID (PID) of current script:</li>
</ul>


<p><img class="center" src="/images/pid.png"></p>

<hr />

<p><strong>Pre-defined Global Variables vs. Global Constants:</strong></p>

<p>Constants are an opposite of variables, but since Ruby has a number of global constants, I thought it would be good to briefly mention them as well.</p>

<p>The most commonly used global constants are <strong><code>ENV</code></strong> and <strong><code>ARGV</code></strong>.</p>

<ul>
<li><strong><code>ENV</code></strong> gives access to environmental variables in a Ruby hash with variables as a hash key.</li>
</ul>


<p><img class="center" src="/images/ENV.png"></p>

<ul>
<li><strong><code>ARGV</code></strong> gives access to command-line argument values as strings in a Ruby array. It is also aliased as <strong><code>$*</code></strong>.</li>
</ul>


<hr />

<p><strong>Tracing Global Variables:</strong></p>

<p>Check out this RosettaCode screenshot <a href="http://rosettacode.org/wiki/99_Bottles_of_Beer#Ruby">example</a> for the classic 99 Bottles of Beer coding exercise:</p>

<p><img class="center" src="/images/rosetta_code_var_trace.png"></p>

<p>The <a href="http://ruby-doc.org/core-2.2.1/Kernel.html#method-i-trace_var">docs</a> say this re: <strong><code>trace_var</code></strong>:</p>

<blockquote><p>Controls tracing of assignments to global variables. The parameter symbol identifies the variable (as either a string name or a symbol identifier). cmd (which may be a string or a Proc object) or block is executed whenever the variable is assigned. The block or Proc object receives the variable&rsquo;s new value as a parameter. Also see Kernel::untrace_var.</p></blockquote>

<p>This is the example that the Docs use:</p>

<p><img class="center" src="/images/tracing_docs_ex.png"></p>

<p>As you can see, one can pass a symbol that names a variable and a block of code or a string to the method. When the value of the variable changes, the block of code will evaluated or the string will be invoked (see more in <a href="http://www.amazon.com/Ruby-Programming-Language-David-Flanagan/dp/0596516177/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1445989282&amp;sr=1-1&amp;keywords=9780596554651">The Ruby Programming Language</a>, 2008, p. 280)</p>

<p>Which means:</p>

<p><img class="center" src="/images/global_var_tracing.png"></p>

<p>And this is exactly how the 99 Bottles of Beer example works!</p>

<p>To stop tracing the variable, use <strong><code>untrace_var</code></strong> just like Ruby docs above specified.</p>
]]></content>
  </entry>
  
</feed>
