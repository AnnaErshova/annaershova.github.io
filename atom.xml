<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Anna's Blog]]></title>
  <link href="http://annaershova.github.io/atom.xml" rel="self"/>
  <link href="http://annaershova.github.io/"/>
  <updated>2015-10-26T16:02:03-04:00</updated>
  <id>http://annaershova.github.io/</id>
  <author>
    <name><![CDATA[Anna Ershova]]></name>
    <email><![CDATA[anna.ershova@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why Localhost:3000?]]></title>
    <link href="http://annaershova.github.io/blog/2015/10/26/why-localhost-3000/"/>
    <updated>2015-10-26T12:10:56-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/10/26/why-localhost-3000</id>
    <content type="html"><![CDATA[<p>Most people new to rails go through some sort of &lsquo;make-an-app-in-under-15-minutes&rsquo; tutorial, which always includes instructions to run <strong><code>rails s</code></strong> or  <strong><code>rails server</code></strong> to get a preview of your app.</p>

<p>Typing it into a console usually produces something like this:</p>

<p><img class="center" src="http://annaershova.github.io/images/railss.png"></p>

<p>And when you point your browser to <strong><code>localhost:3000</code></strong> (or alternatively <strong><code>http://127.0.0.1:3000/</code></strong>, where <strong><code>http://127.0.0.1</code></strong> is your computer&rsquo;s loopback address), you see the standard Welcome Aboard message:</p>

<p><img class="center" src="http://annaershova.github.io/images/localhostscreenshot.png"></p>

<p>In fact, <strong><code>localhost:3000</code></strong> is so common that someone registered a <a href="http://www.localhost3000.org/">website</a> that takes you to a website that reminds you you forgot to start your server, if that is indeed the case.</p>

<hr />

<p><strong>What if I want to use another port?</strong></p>

<p>To switch port to, say, 80, run this:</p>

<p><strong><code>bundle exec rails s -p 80</code></strong></p>

<p>See documentation on it <a href="https://github.com/rails/rails/blob/4-2-stable/railties/lib/rails/commands/server.rb">here</a> as I could not find any actual description in Terminal:</p>

<p><img class="center" src="http://annaershova.github.io/images/rails_server_docs.png"></p>

<hr />

<p>Rails servers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Ruby / Rails / General Coding Resources]]></title>
    <link href="http://annaershova.github.io/blog/2015/10/26/some-ruby-slash-rails-slash-general-coding-resources/"/>
    <updated>2015-10-26T09:01:07-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/10/26/some-ruby-slash-rails-slash-general-coding-resources</id>
    <content type="html"><![CDATA[<p>I keep getting asked what my favorite coding resources are, Rails or otherwise, so this is an attempt at keeping a running list, in no particular order. I fully intend to come back and edit this post as I stumbple upon new resources.</p>

<p>There are a lot of really great blogs from people writing Rails, and sometimes when googling something, I see amazingly written posts on fairly esoteric subjects. The resources below tend to be consistently good and conventional &ndash; and enough to keep new developers occupied for a long, long time.</p>

<hr />

<p><strong>Rails newsletters:</strong></p>

<ul>
<li><p><a href="http://rubyweekly.com/">Ruby Weekly</a> &ndash; one email every Thursday.</p></li>
<li><p><a href="http://greenruby.org/">Green Ruby</a> &ndash; one email every Sunday.</p></li>
</ul>


<p>They have a lot of overlap, but since they come out on different days, sometimes it&rsquo;s nice to see a reminder that I meant to read an article or explore a new gem.</p>

<hr />

<p><strong>Resources:</strong></p>

<ul>
<li><p><a href="https://practicingruby.com/">Practicing Ruby</a> &ndash; well worth the $8/month they suggest paying.</p></li>
<li><p><a href="http://www.rubytapas.com/">Ruby Tapas</a> &ndash; also well worth the $9/month subscription fee.</p></li>
<li><p><a href="https://devchat.tv/ruby-rogues/">Ruby Rogues</a></p></li>
<li><p><a href="http://railscasts.com/">http://railscasts.com/</a> &ndash; amazing, well worth the subscription fee, although older poscasts are all free.</p></li>
</ul>


<hr />

<p><strong>General Resources:</strong></p>

<ul>
<li><p><a href="http://codercareer.blogspot.com/">CoderCareer</a> &ndash; not Ruby/Rails-specific, but lots of cool content discussing coding interview questions and how to answer them. Gets updated very rarely though.</p></li>
<li><p><a href="https://www.igvita.com/">Ignita</a> &ndash; also rarely updated, also lots of cool content.</p></li>
<li><p><a href="(http://adam.herokuapp.com/">A Tornado of Razorblades</a> by Adam Wiggins, a founder of Heroku.  &ndash; also rarely updated, also pretty cool.</p></li>
</ul>


<hr />

<p><strong>Blogs:</strong></p>

<ul>
<li><p><a href="https://www.justinweiss.com/articles/archives/">Justin Weiss</a>. Updated less often than many people would like, but still an amazing read.</p></li>
<li><p><a href="https://robots.thoughtbot.com/tags/rails">Thoughtbot</a> blog. Those are the guys behind <a href="https://github.com/thoughtbot/factory_girl">FactoryGirl</a> and <a href="https://github.com/thoughtbot/paperclip">Paperclip</a> and many, many other projects. Enough said.</p></li>
<li><p><a href="http://weblog.rubyonrails.org/">Official Rails Weblog</a> &ndash; great way to get a gist on what is happening in Rails.</p></li>
<li><p><a href="https://www.reddit.com/r/rails">Ruby on Rails subreddit</a> &ndash; not the best daily read, and it&rsquo;s too easy to get distracted by the cat memes in other subreddits, but cool to check out once in a while.</p></li>
<li><p><a href="http://www.rubyflow.com/">RubyFlow</a> &ndash; community-sourced. Content varies from &ldquo;what&rsquo;s new in Rails 5&rdquo; to discussing very technical subjects.</p></li>
<li><p><a href="http://www.rubyinside.com/">RubyInside</a> &ndash; archive of some cool reads.</p></li>
<li><p><a href="http://blog.arkency.com/">Blog by Arkency</a>, a dev shop. These guys know what they are talking about.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSRF Part II -- CSRF vs. XSS]]></title>
    <link href="http://annaershova.github.io/blog/2015/10/25/csrf-part-ii-csrf-vs-xss/"/>
    <updated>2015-10-25T18:03:57-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/10/25/csrf-part-ii-csrf-vs-xss</id>
    <content type="html"><![CDATA[<p>I touched upon CSRF (cross-site request forgery) in my <a href="http://annaershova.github.io/blog/2015/10/25/whats-csrf-and-what-exactly-are-we-are-protecting-from-forgery-in-controllers/">previous blog post</a>, but as I was mentionining that it is distinct from XSS since the two get mixed up sometimes (must be the multi-fricative-consonant abbreviation), I realized that I should discuss it in greater detail.</p>

<hr />

<p><strong>Web Attack Types Vulnerabilities: Gotta Catch &lsquo;Em All</strong></p>

<p>Both XSS abd CSRF are types of web attacks (there are more than these two, but I have seen people get them confused, and they do have interesting parallels). XSS is <em>cross-site scripting</em>. CSRF, as previously mentioned, is <em>cross-side request forgery</em>.</p>

<p><strong>The fundamental conceptual difference between CSRF and XSS is that CSRF exploits a website&rsquo;s trust (authentication) of a user, whereas XSS exploits a user&rsquo;s trust for a website.</strong></p>

<hr />

<p><strong>XSS: The Mechanics</strong></p>

<p>XSS involves injecting malicious scripts (in the case of Rails, it would usually be JavaScript, potentially combined with HTML, often with a <strong><code>&lt;script&gt;</code></strong> tag) into a webpage. That script can be then executed when other users access the website.</p>

<p>For instance, a hacker introduces some JavaScript to the comments section of a webpage, and when other users try to access it, the script is executed and, say, the user is re-directed to a porn website they otherwise from their original destination S.H.I.E.L.D. subreddit.</p>

<p>XSS attacks are incredibly common and easy to execute if a website does not have appropriate security features.</p>

<hr />

<p><strong>XSS and Ruby on Rails: Opting Out of HTML Escape</strong></p>

<p>As with CSRF, Rails comes with a reasonably strong protection against XSS attacks. That certainly makes life easier for most beginners who want to have a reasonably secure website without spending too much time researching security and focusing on building other skills first.</p>

<p>The idea behind Rails XSS protection is automatically sanitizing user input so that nothing gets executed as a script if it&rsquo;s not meant to be. Back in the day, that had to be done manually, which, was extremely time-consuming and error-prone. So Rails 3 incorporated a simple idea: opting out of html escaping instead of opting in, if need be.</p>

<p>It accomplished that by integrating <strong><code>RailsXss</code></strong> <a href="https://github.com/rails/rails_xss">plugin</a>, and the feature <a href="https://github.com/rails/rails/commit/9415935902f120a9bac0bfce7129725a0db38ed3">became part of Edge Rails</a> as early as <a href="http://weblog.rubyonrails.org/2009/10/12/what-s-new-in-edge-rails/">October 2009</a> (see more on Edge Rails in my post <a href="http://annaershova.github.io/blog/2015/10/11/running-edge-rails-living-dangerously/">here</a> ).</p>

<p>Rails 3+ officially supports this feature, and it backports to earlier versions of Rails as well.</p>

<p>I noticed from reading <a href="https://github.com/rails/rails/blob/4-2-stable/activesupport/lib/active_support/core_ext/string/output_safety.rb">source code</a> that Rails now assumes that no string input is <strong><code>html_safe?</code></strong> by default, while integers are:</p>

<p><img class="center" src="http://annaershova.github.io/images/object_vs_numeric.png"></p>

<p>This is what it looks like in Rails console:</p>

<p><img class="center" src="http://annaershova.github.io/images/html_safe_int.png"></p>

<p>Html escape it can be still done manually with an <a href="http://api.rubyonrails.org/classes/ERB/Util.html#method-c-html_escape"><strong><code>html_escape</code></strong></a> in front of whatever you are rendering within the erb tags.</p>

<p><strong><code>html_escape</code></strong> can be also aliased as <strong><code>h</code></strong>, and it is fine to use it even if something is getting html escaped by default as Rails will recognize it as such and will only escape it once.</p>

<p>See example from <a href="https://github.com/rails/rails/blob/4-2-stable/activesupport/lib/active_support/core_ext/string/output_safety.rb">source code</a>:</p>

<p><img class="center" src="http://annaershova.github.io/images/html_escape.png"></p>

<p>The potentially &lsquo;dangerous&rsquo; charactaters are converted into their human-readable equivalents as the same source code indicates:</p>

<p><strong><code>HTML_ESCAPE = { '&amp;' =&gt; '&amp;amp;',  '&gt;' =&gt; '&amp;gt;',   '&lt;' =&gt; '&amp;lt;', '"' =&gt; '&amp;quot;', "'" =&gt; '&amp;#39;' }</code></strong></p>

<p>Similarily, <a href="https://github.com/rails/rails/blob/4-2-stable/activesupport/lib/active_support/core_ext/string/output_safety.rb"><strong><code>html_escape_once</code></strong></a> escapes HTML code without affecting existing escaped code:</p>

<p><img class="center" src="http://annaershova.github.io/images/escape_once.png"></p>

<p>If you do not want user input to be sanitized, then using <strong><code>raw</code></strong> in the erb template is the way to go, e.g.:</p>

<p><img class="center" src="http://annaershova.github.io/images/rawxss.png"></p>

<hr />

<p><strong>If That Were Not Enough</strong></p>

<p><a href="https://en.wikipedia.org/wiki/Cross-site_scripting">Wikipedia article</a> is a good starting point.</p>

<p>This <a href="http://railscasts.com/episodes/204-xss-protection-in-rails-3?autoplay=true">Railscast episode</a> is worth spending 8 minutes on, even though it is a bit older.</p>

<p>And as usual, more on XSS on the <a href="http://guides.rubyonrails.org/security.html#cross-site-scripting-xss">Rails Guides</a> website.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's CSRF and What Exactly Are We Are Protecting From Forgery?]]></title>
    <link href="http://annaershova.github.io/blog/2015/10/25/whats-csrf-and-what-exactly-are-we-are-protecting-from-forgery-in-controllers/"/>
    <updated>2015-10-25T14:53:44-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/10/25/whats-csrf-and-what-exactly-are-we-are-protecting-from-forgery-in-controllers</id>
    <content type="html"><![CDATA[<p>Running any <strong><code>Rails new</code></strong> command will produce a <strong><code>ApplicationDirectory/app/controllers/application_controller.rb</code></strong> file that looks like this initially:</p>

<p><img class="center" src="http://annaershova.github.io/images/application_controller_csrf.png"></p>

<p>Since Rails is so beginner-friendly, many new developers are too preoccupied with making an app that works (<em>why do my routes look like that?!</em>) than looking into each and every line of generated code. I find that the CSRF-related line of code in a standard <strong><code>ApplicationController</code></strong> is particularily often overlooked. I wanted to discuss it here as it is connected a serious security issue often encountered on the web.</p>

<p>The Ruby on Rails API has a comprehensive <a href="http://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection/ClassMethods.html">guide</a> explaining what <strong><code>protect_from_forgery</code></strong> does. It still assumes a basic understanding of CSRF.</p>

<p>CSRF, just like XSS, which will be discussed in the next post, is not a Rails-specific problem, and it really affects all computer systems and all languages, although this post will discuss in the context of Rails.</p>

<hr />

<p><strong>How CSRF Works</strong></p>

<p>CSRF (sometimes spelled as XSRF) stands for <em>cross-side request forgery</em>. It is, according to <a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery">Wikipedia</a>, sometimes pronounced as <em>see-surf</em> (which I absolutely did not know prior to reading the Wiki article). However it is pronounced, it involves an attacker submitting malicious commands to an app that appear to come from a user that the app has authorized and that the browser trusts. The hacker can therefore gain control of an account.</p>

<p>CSRF is sometimes refered to as &lsquo;session riding,&rsquo; a pretty accurate description as you&rsquo;ll see.</p>

<p>Note that this is different from XSS (cross-site scripting).</p>

<p>Most Rails apps use cookie-based sessions. If an attacker can find a link s/he can reproduce (<em>forge</em>) that involves executing something on a target page while a user is logged in, they can then embed such a link &ndash; with a malicious action &ndash; on a page where a user can click it, thus giving an attacker control of the account.</p>

<p>It is not uncommon for websites to be vulnerable to CSRF attacks. At various times, some major websites such as YouTube, The New York Times and INGDirect <a href="http://www.darkreading.com/risk/csrf-flaws-found-on-major-websites/d/d-id/1129743">famously</a> all had that issue.</p>

<p>In INGDirect case, hackers could gain control of users' accounts and transfer money out to an account that was open in user&rsquo;s name but was not actually associated with them. In YouTube&rsquo;s case, hackers could friend other users on behalf of a hacked user, add videos to the user&rsquo;s favorites, and send messages on a user&rsquo;s behalf.</p>

<p>A web developer generally needs to explicitly protect their app from CSRF attacks, and thankfully, Rails does it for us with default code. (Other languages often have plugins etc to help handle this issue, but Rails, as usual, makes things much easier.)</p>

<hr />

<p><strong>What Is Protect_From_Forgery?</strong></p>

<p>According to to the <a href="https://github.com/rails/rails/blob/0450642c27af3af35b449208b21695fd55c30f90/actionpack/lib/action_controller/metal/request_forgery_protection.rb">Rails source</a>:</p>

<blockquote><p>Controller actions are protected from Cross-Site Request Forgery (CSRF) attacks by including a token in the rendered HTML for your application. This token is stored as a random string in the session, to which an attacker does not have access. When a request reaches your application, Rails verifies the received token with the token in the session. All requests are checked except GET requests as these should be idempotent. Keep in mind that all session-oriented requests should be CSRF protected, including JavaScript and HTML requests.</p></blockquote>

<p>That means that your app will protected against CSRF attacks with one line in your Application Controller: <strong><code>protect_from_forgery with: :exception</code></strong>.</p>

<hr />

<p><strong>How Is Protection Executed?</strong></p>

<p>General principle of CSRF protection is introducing user-specific secret data into the request that would not be accessible by a hacker. That is exactly how Rails does it. It protects your session via a <strong><code>:null_session method</code></strong>: an empty session is generated during a request.</p>

<p>It requires that a special CSRF token is present before any <strong><code>POST</code></strong>, <strong><code>PUT</code></strong> or <strong><code>DELETE</code></strong> request is accepted. That token will be included as a hidden field when using Rails forms builders. (Most browsers only support <strong><code>GET</code></strong> or <strong><code>PUT</code></strong> instead of all the proper RESTful verbs, but we know that Rails uses a hidden field <strong><code>_method</code></strong> to fix it.)</p>

<p><strong><code>GET</code></strong> requests are not protected since they don&rsquo;t have potential to leak sensitive data. That is why it is important to use <strong><code>GET</code></strong> requests appropriately in cases when a database is read or queried etc, but a user&rsquo;s state in the app is not modified.</p>

<p>The required security token in question is known as <strong><code>authenticity_token</code></strong>. That token is known to its app, but not to others. To achieve that, its name and value must be added to every view that renders forms by adding <strong><code>csrf_meta_tags</code></strong> within html <strong><code>head</code></strong> tags. That is also a default option generated when using a <strong><code>Rails new</code></strong> command and places into a <strong><code>ApplicationDirectory/app/views/layouts/application.html.erb</code></strong> file, which is normally the only view file generated for a model-less app:</p>

<p><img class="center" src="http://annaershova.github.io/images/applicationhtmlerb.png"></p>

<p>It&rsquo;s interesting to see the <a href="https://github.com/rails/rails/blob/4-2-stable/railties/lib/rails/generators/rails/app/templates/app/views/layouts/application.html.erb.tt">source code</a> for this in the Rails repo:</p>

<p><img class="center" src="http://annaershova.github.io/images/applicationhtmlerblayout.png"></p>

<p>Is a CSRF token does not match, Rails will raise an <strong><code>InvalidAuthenticityToken</code></strong>.</p>

<hr />

<p><strong>What if I am running tests?</strong></p>

<p>To disactivate this feature for the test environment:</p>

<p><strong><code>protect_from_forgery unless Rails.env.test?</code></strong></p>

<hr />

<p><strong>What If I am Building an API?</strong></p>

<p>Since XML or JSON formats are also affected by this code, default forgery protection should be turned off if you are building an API as the API is designed to be stateless: <strong><code>protect_from_forgery unless: -&gt; { request.format.json? }</code></strong></p>

<p>There is more information on the <a href="http://guides.rubyonrails.org/security.html">Rails Security Guides</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastering Your Terminal -- Part III]]></title>
    <link href="http://annaershova.github.io/blog/2015/10/20/mastering-your-terminal-part-iii/"/>
    <updated>2015-10-20T23:24:26-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/10/20/mastering-your-terminal-part-iii</id>
    <content type="html"><![CDATA[<p><strong>Shutting Down Your Mac From Your Terminal:</strong></p>

<p><strong><code>sudo shutdown -r now</code></strong></p>

<p><strong><code>shutdown</code></strong> is the command you need.</p>

<p>Pass in the following options:</p>

<ul>
<li><strong><code>-h</code></strong> &ndash; halt the session, re-starts the system</li>
<li><strong><code>-s</code></strong> &ndash; sleep</li>
<li><strong><code>-r</code></strong> &ndash; re-boot the system</li>
<li><strong><code>-k</code></strong> &ndash; kick everyone off but the super-user</li>
</ul>


<p>And as for time options:</p>

<ul>
<li><strong><code>now</code></strong> &ndash; execute command immediately</li>
<li><strong><code>+integer</code></strong> &ndash; execute command in x minutes (e.g., <strong><code>+10</code></strong> is in 10 minutes)</li>
<li><strong><code>yymmddhhmm</code></strong> &ndash; execute command on a given time and date</li>
</ul>


<p>If you schedule a <strong><code>shutdown</code></strong> command, but decide to hold off of it, <strong><code>sudo shutdown -c</code></strong> will cancel it.</p>

<p>In my understanding, <strong><code>sudo shutdown -r now</code></strong> is a functional equivalent of <strong><code>sudo reboot</code></strong></p>

<p>All those commands can be followed by a message that can be seen by other users who are logged in, for instance, <strong><code>sudo shutdown -r now 'Re-starting Now'</code></strong>.</p>

<hr />

<p><strong>Changing What Your Power Button Does:</strong></p>

<p>In the OS X prior to the 10.9 Maverick, a power button used to bring up a <strong><code>Restart</code></strong>, <strong><code>Sleep</code></strong>, <strong><code>Cancel</code></strong>, and <strong><code>Shut Down</code></strong> options.</p>

<p>In later OS X versions, pressing it just puts your machine to sleep. If you want to have it bring up an earlier options menu, run this:</p>

<p><strong><code>defaults write com.apple.loginwindow PowerButtonSleepsSystem -bool FALSE</code></strong></p>

<p>Pressing the power button will then bring up this dialog:</p>

<p><img class="center" src="http://annaershova.github.io/images/powerbuttondialog.png"></p>

<p>If you want to switch back to the sleep-only option, run the same command with <strong><code>TRUE</code></strong> instead of <strong><code>FALSE</code></strong>.</p>

<hr />

<p><strong>Having Your System Restart Automatically If It Freezes:</strong></p>

<p>While Macs tend to have relatively good uptimes (see <a href="http://annaershova.github.io/blog/2015/10/12/mac-uptime-and-reboot-stats/">here</a> for more info what that is and how to find it out), OS X can still freeze up. Most users press the power button for a couple of seconds to have it turn off, and then press it again to turn it back on. That generally works well, but you can also type this in your Terminal to have its equivalent happen automatically:</p>

<p><strong><code>sudo systemsetup -setrestartfreeze on</code></strong></p>

<p>(It&rsquo;s also useful if you are not there physically to press the restart button, for instance, if your Mac acts as a server.)</p>

<p>To disable this option, run the same command with <strong><code>OFF</code></strong> instead of <strong><code>ON</code></strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastering Your Terminal -- Part II]]></title>
    <link href="http://annaershova.github.io/blog/2015/10/19/mastering-your-terminal-part-ii/"/>
    <updated>2015-10-19T23:24:32-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/10/19/mastering-your-terminal-part-ii</id>
    <content type="html"><![CDATA[<p><strong>Finding your way around: </strong><code>find</code><strong>, </strong><code>mdfind</code><strong>, and </strong><code>locate</code><strong> </strong></p>

<hr />

<p><strong><code>find</code></strong></p>

<ul>
<li><strong><code>find</code></strong> &ldquo;walks a file hierarchy.&rdquo; You can always search for files using Spotlight, but it is' easy on your Terminal as well.</li>
<li><strong><code>find path/to/search -name name_to_search_for</code></strong> to search for a specific file name</li>
<li><strong><code>find / -name name_to_search_for</code></strong> to search your entire computer</li>
<li><strong><code>find ~ -name name_to_search_for</code></strong> to search your user directory</li>
<li><strong><code>find path/to/search -iname name_to_search_for</code></strong> &ndash; add the <strong><code>-i</code></strong> flag to do a case-insensitive match.</li>
<li><strong><code>find path/to/search -size name_to_search_for</code></strong> to search for a specific file size</li>
<li><strong><code>find path/to/search -type name_to_search_for</code></strong> to search for a specific file type</li>
</ul>


<p>As usual, there are many other search options that running <strong><code>man</code></strong> find will showcase, and they can be stacked together to filter results.</p>

<hr />

<p><strong><code>mdfind</code></strong></p>

<ul>
<li><strong><code>mdfind query</code></strong> &ldquo;finds files matching a given query&rdquo; as per its manual. It uses metadata to search for queries, so it is basically a shell for your Spotlight search. Metadata, or data about data itself, is at the core of Spotlight &ndash; that is how pressing <strong><code>⌘ space bar</code></strong> and entering &lsquo;Ruby&rsquo; will show you a list of all documents that mention Ruby.</li>
<li><strong><code>mdfind query</code></strong>  note that the query does not have to be 1 word, but can be several.</li>
<li><strong><code>mdfind image</code></strong> will find all image files (if you run it from any directory, it will still search for all images for an existing user, just like Spotlight does). If you run it, and it starts giving you an endless output of image file paths, just run <strong><code>Ctrl + C</code></strong> to stop it.</li>
<li><strong><code>mdfind image -onlyin path/to/directory</code></strong> searches for all images in a certain directory</li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/mdfindonlyin.png"></p>

<ul>
<li><p><strong><code>mdfind *query* -onlyin path/to/directory/1 -onlyin path/to/directory/2</code></strong> paths can be stacked just like other queries.</p></li>
<li><p><strong><code>mdfind query -onlyin $PWD</code></strong> to search in a current directory.</p></li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/onlyin_pwd.png"></p>

<ul>
<li><strong><code>mdfind query -live</code></strong> watches outcome of a search for a certain query. So if a file with a matching metadata is added, the terminal tab/window in which you are running that command will show that file.</li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/onlyin_pwd.png"></p>

<p><strong> Boolean operators and </strong><code>mdfind</code><strong>: </strong></p>

<p>You are probably familiar with boolean operators if you are developer. <strong><code>mdfind</code></strong> uses a very simplified version of them:</p>

<ul>
<li><p><strong><code>mdfind query1|query2</code></strong> &ndash; OR; note no whitespace</p></li>
<li><p><strong><code>mdfind query1(-query2</code>)</strong> &ndash; excludes query 2; note no whitespace</p></li>
<li><p>Use <strong><code>()</code></strong> to group queries. To find matches to 2 queries, use <code>mdfind (query1 query2)</code>** as <code>mdfind query1 query2</code> will only search for the second word.</p></li>
<li><p>Use <code>""</code> to escape apostrophes, otherwise your Terminal will think your query is incomplete.</p></li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/mdfind_apostrophe.png"></p>

<hr />

<p><strong><code>locate</code></strong></p>

<ul>
<li><strong><code>locate</code></strong> &ldquo;find filenames quickly.&rdquo; <em>Quickly</em> is the keyword here. It relies on an index database of all filenames to find the one you need. Think of it as a cookbook index: instead of parsing throughout every recipe that uses shiitake mushrooms, you go straight to the index in the back. look for shiitake, and it tells you where to look for it. The problem with it is that the index is only updated once a week or so, so if you are looking for a newly created file, it may not come up.</li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/locate_turkey.png"></p>

<ul>
<li>Using <strong><code>locate</code></strong> for the first time ever or after a major system update can cause a following error: &ldquo;WARNING: The locate database (/var/db/locate.database) does not exist.&rdquo;</li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/locate_missing_database.png"></p>

<p>Follow the instructions to generate an index database; it will take some time to run as it will go through every file on your system to generate its index (in cookbook terms, someone had to go through and read every recipe and list every ingredient in the index.) It actually does not alert you to the fact it is being generated in the background, but it should work fine and if you run the command again an hour or so later, the database should be there.</p>

<p>You can receive instructions your index database is outdates, in which case you similarly need to follow instructions to rebuild it.</p>

<ul>
<li>Note that both <strong><code>find</code></strong> and <strong><code>locate</code></strong> are case-sensitive when it comes to file names. Use <strong><code>-i</code></strong> flag to make them case-insensitive.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastering Your Terminal -- Part I]]></title>
    <link href="http://annaershova.github.io/blog/2015/10/19/mastering-your-terminal-part-i/"/>
    <updated>2015-10-19T16:15:58-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/10/19/mastering-your-terminal-part-i</id>
    <content type="html"><![CDATA[<p>Developers tend to spend a lot of time in their Terminals, and while most know all the basic commands to run, there are some that are less commonly used, but quite nifty to know.</p>

<p>In an <a href="http://annaershova.github.io/blog/2015/10/12/updating-os-x-from-your-command-line/">earlier post</a>, I mentioned that one can use command line to run a software update command: <code>softwareupdate -l</code> to see what updates are available:</p>

<p><img class="center" src="http://annaershova.github.io/images/softwareupdate_list.png"></p>

<p>Terminal, or more accurately, Terminal.app, is a terminal emulator program that provides a connection to your shell (most likely <strong><code>bash</code></strong>; run <strong><code>echo $0</code></strong> to see what yours is running).</p>

<p>Technically speaking, running commands in Terminal is really running commands in a command-line interface that runs in a shell that runs in Terminal.</p>

<p>Now that we got that out of the way &ndash;</p>

<p><strong>Some basic tricks</strong>:</p>

<ul>
<li><p><strong><code>Up</code></strong> or <strong><code>down</code></strong> key to navigate between commands. I use <strong><code>up</code></strong> all the time when navigating to a previously used command that is too long to type again.</p></li>
<li><p><strong><code>!!</code></strong> to repeat last command (this will be specific to your Terminal window or tab in which you run it)</p></li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/bang_bang.png"></p>

<p>Ok, it is actually easier to press the <strong><code>up</code></strong> arrow once, but hey, saying <em>bang bang</em> out loud is a lot more fun.</p>

<ul>
<li>Drop file name from Finder into terminal to get its path &ndash; it can be then copy-pasted into a <strong><code>cd</code></strong> command etc.</li>
</ul>


<p><strong>More ways to navigate Terminal using familiar shortcuts</strong>:</p>

<ul>
<li><p><strong><code>Ctrl + T</code></strong> to open a new tab within the same Terminal session.</p></li>
<li><p><strong><code>Ctrl + F</code></strong> to search your Terminal&rsquo;s tab or session (actual text output thereof).</p></li>
<li><p><strong><code>Command + +</code></strong> or <strong><code>Command + -</code></strong> to zoom in or out.</p></li>
<li><p><strong><code>Command + G</code></strong> to go to a next search match, <strong><code>Command + Shift + G</code></strong> to go to a previous match.</p></li>
<li><p><strong><code>Control + C</code></strong> or <strong><code>Command + .</code></strong> to cancel a command. Rails developers use that a lot to stop Rails server from running, for instance.</p></li>
<li><p>Use <strong><code>TAB</code></strong> to autocomplete a directory name. Use <strong><code>TAB</code></strong> <strong><code>TAB</code></strong> to show a list of options when there are multiple matches.</p></li>
</ul>


<p><strong>Who am I, where am I, and what time is it anyway?</strong></p>

<ul>
<li><strong><code>pwd</code></strong> to see user&rsquo;s current directory:</li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/pwd_use.png"></p>

<ul>
<li><strong><code>whoami</code></strong> to see username of the owner of the current login/connection session in the shell (or in manual&rsquo;s words, &ldquo;display effective user id&rdquo;)</li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/whoami.png"></p>

<ul>
<li>While <strong><code>whoami</code></strong> is a very commonly listed command in all of the top-20-Terminal-commands-you-must-learn-now list, its cousins <strong><code>WhoAmI</code></strong> and <strong><code>who am i</code></strong> are less known:</li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/whoami_variations.png"></p>

<p>(There is no manual entry on <strong><code>WhoAmI</code></strong>, and that seems like a pretty rare command in general.)</p>

<ul>
<li>Another cousin <strong><code>who</code></strong> displays a more expanded version of <strong><code>who am i</code></strong>, effectivly showing all users that are currently logged in into a terminal session:</li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/who.png"></p>

<ul>
<li>And yet another cousin <strong><code>w</code></strong> &ldquo;displays who is logged in and what they are doing:</li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/w_command.png"></p>

<ul>
<li><strong><code>date</code></strong> to see current date and time:</li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/date_command.png"></p>

<p><strong>How do I get around?</strong></p>

<ul>
<li><p><strong><code>cd directory_name</code></strong> or <strong><code>cd path/to/directory</code></strong> to move to a different directory</p></li>
<li><p><strong><code>TAB</code></strong> can be used with <strong><code>cd</code></strong> to autocomplete a directory name, but using an asterix (*) as a wildcard also works:</p></li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/cd_wild_card.png"></p>

<ul>
<li><strong><code>?characters</code></strong> to search for a specific name:</li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/cd_wild_card.png"></p>

<ul>
<li><p><strong><code>cd ..</code></strong> to move up one directory, <strong><code>cd ../..</code></strong>  to move up two directories, and so forth.</p></li>
<li><p><strong><code>cd ~</code></strong> or just <strong><code>cd</code></strong> to go to your home directory.</p></li>
<li><p><strong><code>cd /</code></strong> to go to the level of your file hierarchy (this is not the same as home):</p></li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/root_vs_top.png"></p>

<ul>
<li><strong><code>cd -</code></strong> to go to the last visited directory:</li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/cd_minus.png"></p>

<ul>
<li>Note on case sensitivity: generally, names of files and directories (so that <strong><code>cd octopress</code></strong> is the same as <strong><code>cd Octopress</code></strong>) are not case sensitive unless you have specially set up your system to be that way.</li>
</ul>


<p><strong>So what am I seeing in here?</strong></p>

<ul>
<li><strong><code>ls</code></strong> to see a list of files in your directory (or <strong><code>ls directory/path</code></strong> for another directory)</li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/octopress_ls.png"></p>

<ul>
<li><strong><code>ls -l</code></strong> to see a <em>l</em>ong list of files, including creation dates and access permissions, number of links in the item, etc:</li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/du_sh.png"></p>

<ul>
<li><strong><code>ls -lh</code></strong> or <strong><code>ls -l -h</code></strong> (flags can be combined) to see a <em>h</em>uman readable output as long list. In this case, the only thing that changes is size in bytes is converted into units that make more sense such as kilobytes. Note that <strong><code>-h</code></strong> flag can be use with some other commands as well.</li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/ls_lh.png"></p>

<p>(Try running <strong><code>ls</code></strong> first, then <strong><code>!! -l</code></strong>, then <strong><code>!! -h</code></strong> to stack these commands. Or just press an <strong><code>up</code></strong> key and add those flags before hitting enter).</p>

<ul>
<li><p><strong><code>ls /</code></strong> (or any other <strong><code>ls</code></strong> command with a <strong><code>flag</code></strong> and <strong><code>/</code></strong>) to see contents of home directory. Note that normally, you have to be in the directory which contents you are trying to view.</p></li>
<li><p><strong><code>du -sh directory_name</code></strong> to see size of a directory:</p></li>
</ul>


<p><img class="center" src="http://annaershova.github.io/images/date_command.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Scaffold: Generating It, Deleting It, Evaluating Pros and Cons]]></title>
    <link href="http://annaershova.github.io/blog/2015/10/18/generating-and-deleting-a-rails-scaffold/"/>
    <updated>2015-10-18T12:13:33-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/10/18/generating-and-deleting-a-rails-scaffold</id>
    <content type="html"><![CDATA[<p>Rails comes with a number of very convenient <a href="http://guides.rubyonrails.org/generators.html">generators</a> that can take a lot of work out of creating models, controllers, views, tests, corresponding database migrations, etc.</p>

<p>Like many other developers, I use Rails scaffold generation as an efficient and convenient time-saver.</p>

<p>From <a href="http://guides.rubyonrails.org/command_line.html">Guides</a>:</p>

<blockquote><p>A scaffold in Rails is a full set of model, database migration for that model, controller to manipulate it, views to view and manipulate the data, and a test suite for each of the above.</p></blockquote>

<p>Of course, you can generate all of those components individually as well, depending on your needs. But I think the scaffold generator in particular gets quite overused.</p>

<p>A regular scaffold Terminal command looks like this: <code>rails g scaffold Model_Name column_name:column_type:optional_index</code></p>

<p><img class="center" src="http://annaershova.github.io/images/scaffold_generate.png"></p>

<p><code>Model_Name</code> should be in singular, either under_scored or CamelCased.</p>

<p>Sometimes you hit the <code>return</code> button too soon, and deleting generated files by hand is just too much trouble.</p>

<p>There is a way to undo your entire scaffold: <code>rails d scaffold Generated_Scaffold_Name</code>:</p>

<p><img class="center" src="http://annaershova.github.io/images/scaffold_destroy.png"></p>

<p>(You can type out <code>generate</code> instead of <code>g</code> and <code>destroy</code> instead of <code>d</code>.)</p>

<p>Note that if you have already run <code>rake db:migrate</code> after generating your scaffold, the <code>destroy</code> command won&rsquo;t work. It will delete the files that the scaffold command has created, but it won&rsquo;t alter the schema and whatever alterations your migration has created will stay there. See my <a href="http://annaershova.github.io/blog/2015/10/15/rake-database-tasks/">previous post</a> on database-related rake commands to learn how to fix that (you will probably want <code>rake db:migrate:down</code> or <code>rake db:rollback</code>).</p>

<p>And assuming you do version control, to see if the <code>destroy</code> command left any files, run <code>git status</code> or <code>git diff</code>.</p>

<p>Realistically speaking, to create a scaffold that later needs to be edited (say, a new migration created etc &ndash; obviously a very common scenario) can cause more time-consuming bug-hunting than creating your MVC + other accoutrements from scratch.</p>

<p>To generate a scaffold with tests (default option) stops a developer from proper test-driven development practices: writing a failing test first, and then making it pass.</p>

<p>You can of course pass in an option to prevent tests from being generated when creating a scaffold. Run <code>rails generate scaffold -h</code> to see a list of options in your terminal:</p>

<p><img class="center" src="http://annaershova.github.io/images/scaffold_options_1.png">
<img class="center" src="http://annaershova.github.io/images/scaffold_options_2.png"></p>

<p>The options above are for Rails 4.2.0 and might be quite different for your version of Rails.</p>

<p>You can see that the command comes with a variety of options that allow for reasonable flexibility. For instance, to skip generating a migration, you can pass in <code>--skip-migration</code>. To skip creating tests, pass in <code>--no-test-framework</code>.</p>

<p>Ultimately, once you know exactly what you are building to the extent that you end up passing in a lot of options, you don&rsquo;t really need generators anymore and can create files manually that fit your needs. You wouldn&rsquo;t want to use it for production. But if you are just learning Rails and experimenting with it, generators are very handy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rake Database Tasks]]></title>
    <link href="http://annaershova.github.io/blog/2015/10/15/rake-database-tasks/"/>
    <updated>2015-10-15T10:47:23-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/10/15/rake-database-tasks</id>
    <content type="html"><![CDATA[<p>There are multiple <strong><code>db</code></strong> namespace rake tasks, which are very useful for a Rails developer.</p>

<p>I don&rsquo;t often see them covered in Rails tutorials as a task list, and it took me a while to figure out which commands I needed to use in my regular workflow.</p>

<hr />

<p><strong>Migrations</strong></p>

<p>Most beginner developers stick to <strong><code>rake db:migrate</code></strong>, <strong><code>rake db:seed</code></strong> and <strong><code>rake db:reset</code></strong>, but there are quite a few more options.</p>

<p><em>Migration</em> is a version of a database (I <em>still</em> don&rsquo;t understand <em>what we are migrating and where</em>, but oh well, such is conventional terminology).</p>

<p>Each new migration modifies a database schema (which starts out completely blank) by adding and removing data, changing data types etc.</p>

<p>Your schema is normally stored in  <strong><code>db/schema.rb</code></strong>, although for some developers, it will be in <code>db/structure.sql</code>.</p>

<p>(To create and use <code>structure.sql</code>, use <code>config.active_record.schema_format = :sql</code> in your <code>config/application.rb</code>. Most beginners should be sticking to schema.rb, the default version.)</p>

<hr />

<p><strong>First, some schema-related rake tasks:</strong></p>

<ul>
<li><p><strong><code>rake db:version</code></strong> - to see your current schema version. Schemar versions are normally also listed as timestamps, so you will see something like <code>Current version: 20151014015045</code>.</p></li>
<li><p><strong><code>rake db:forward</code></strong> will push the schema one step up.</p></li>
<li><p><strong><code>rake db:schema:load</code></strong> &ndash; loads she schema into your database. Good practice is using it when you first put your app in production; then run migrations from there on.</p></li>
<li><p><strong><code>rake db:schema:dump</code></strong> &ndash; dumps she schema.</p></li>
</ul>


<hr />

<p><strong> Now back to migrations: </strong></p>

<p>The easiest way to generate a migration is to run <strong><code>rails g migration AddUseridToPosts user_id:integer</code></strong>.</p>

<p>Once a migration has been generated, it will be listed in your <code>db/migrate</code> folder, usually with a format <code>datestamp_migration_name.rb</code>. Running <code>rails g</code> generates a timestamp prefix because that is the order that Rails uses to execute pending migrations.</p>

<p>If you are creating a migration manually or copying over from another file, you need to use any alphanumeric prefix (even if it&rsquo;s one 1,2, and 3) that allows Rails to run pending migrations in correct order; or use a manual datestamp if that&rsquo;s what your other migrations use.</p>

<p>The migration in the example above adds a new colume of <code>user_id</code>, which is a type <code>integer</code>, to a table named <code>Posts</code> &ndash; assumption here is that one user <code>has_many</code> posts and a post <code>belongs_to</code> user (if you don&rsquo;t know what that means, see <a href="http://guides.rubyonrails.org/association_basics.html">Active Record Association Basics</a> ).</p>

<p>You can generate a migration to add a new table altogether, to remove a table or a column, to change a data type of a column, etc.</p>

<p>Even if the migration is in your migrate folder, it does not mean it is in the database schema yet. To incorporate it into the schema, you have any pending migrations into it. And that&rsquo;s when <code>rake db:migrate</code> task comes in.</p>

<p>Before I get started, see this <a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/railties/databases.rake">rails source</a> to see the database.rake file that describes exactly what each task does.</p>

<p>Rake tasks undergo changes between different versions of Rails, so it&rsquo;s good to keep an eye out for anything that might be coming soon.</p>

<hr />

<p><strong> Rake migration tasks </strong></p>

<ul>
<li><p><code>rake db:migrate</code> &ndash; runs the change or up method for all pending migrationsone by one in order indicated by name prefixes. If there are no such migrations, running the task won&rsquo;t produce any outcome. But when there are, it also executes <code>db:schema:dump</code> as it needs to dump the schema and build it anew considering the migration(s) that have been added.</p></li>
<li><p><code>rake db:migrate VERSION=version_number/timestamp</code> &ndash; runs specific migration to which the datestamp refers.</p></li>
<li><p>NB: <code>rake db:migrate VERSION=0&gt;</code> &ndash; roll back all migrations</p></li>
<li><p><code>rake db:migrate RAILS_ENV=test</code> &ndash; runs migrations in an indicated envrionment.</p></li>
</ul>


<p>You should be able to get timestamp as a prefix to a migration file name if you used a rails g command as explained above.</p>

<ul>
<li><p><code>rake db:migrate:up</code> &ndash; runs up command for a given migration version (default is current version)</p></li>
<li><p><code>rake db:migrate:down</code> &ndash; runs down command aka rolls back command for a given migration version</p></li>
</ul>


<p>NB: <code>Up</code> and <code>down</code> are actually old-school commands; <code>up</code> makes a change to the schema and <code>down</code> reverses the <code>up</code> change.</p>

<ul>
<li><p><code>rake db:migrate:redo</code> &ndash; &ldquo;Rollbacks the database one migration and re migrate up (options: <code>STEP=x</code>, <code>version_number/timestamp</code>).&rdquo;</p></li>
<li><p><code>rake db:migrate:redo STEP=x</code> = rolls back x many migrations and re-runs them</p></li>
<li><p><code>rake db:migrate:rollback</code> &ndash; roll back last migration to get user back one step.</p></li>
<li><p><code>rake db:migrate:rollback STEP=x</code> &ndash; roll back x many steps</p></li>
</ul>


<p>Now this is interesting:</p>

<ul>
<li><strong><code>rake db:migrate:reset</code></strong> = <strong><code>rake db:drop</code></strong> + <strong><code>rake db:create</code></strong> + <strong><code>rake db:migrate</code></strong> = undo and re-do migrations again for current environment. It does not rollback migrations. You would want to use it when, say, running <strong><code>rails destroy scaffold Name</code></strong> as it will remove a corresponding migration and the schema would need to be re-created. You would still need to run <strong><code>rake db:seed</code></strong> if you have any seed data.</li>
</ul>


<p>(<strong><code>rake db:create</code></strong> is rather straightforward and an opposite of <strong><code>rake db:drop</code></strong>; it needs to be run when a Rails project is first created or after a database has been dropped, as it the case with <strong><code>rake db:migrate:reset</code></strong> above).</p>

<p>Note the difference compared to:</p>

<ul>
<li><strong><code>rake db:reset</code></strong> = <strong><code>rake db:drop</code></strong> + <strong><code>rake db:setup</code></strong></li>
</ul>


<p>where</p>

<p><strong><code>rake db:setup</code></strong> = <strong><code>rake db:schema:load</code></strong> OR <strong><code>rake db:structure:load</code></strong> + <strong><code>rake db:seed</code></strong></p>

<ul>
<li><p>(<strong><code>rake db:schema:load</code></strong> loads <strong><code>schema.rb</code></strong> into your database)</p></li>
<li><p>(<strong><code>rake db:structure:load</code></strong> loads <strong><code>db/structure.sql</code></strong> if you have specified that in your config, otherwise it will load <strong><code>db/schema.rb</code></strong>)</p></li>
</ul>


<p>Which means that <strong><code>rake db:reset</code></strong> drops the database; recreates it from <strong><code>db/schema.rb</code></strong> or <strong><code>db/structure.sql</code></strong> in your current environment (and NOT from migrations); seeds database from <strong><code>seeds.rb</code></strong>. Note that if you have had anything imported into your database from, say, a <strong><code>csv</code></strong> file, that content will also be gone.</p>

<ul>
<li>Note that <strong><code>rake db:migrate:reset</code></strong> won&rsquo;t seed your database and <strong><code>rake db:setup</code></strong> will.*</li>
</ul>


<p>Another rake task is also useful to see where you are with regard to migrations:</p>

<ul>
<li><strong><code>rake db:migrate:status</code></strong> &ndash; display status of all migrations. It will alert you if there are no schema migrations in your project yet.</li>
</ul>


<p>And a heavy hitter to get you re-started with a clean slate:</p>

<ul>
<li><strong><code>rake db:purge</code></strong> &ndash; &ldquo;Empty the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config). Without RAILS_ENV it defaults to purging the development and test databases.&rdquo;</li>
</ul>


<p>(The <strong><code>rake db:purge</code></strong> task was only added in January 2014 and is less known.)</p>

<hr />

<p>There is a great Rails Guide explaining a lot of these <a href="http://edgeguides.rubyonrails.org/active_record_migrations.html">here</a>.</p>

<p>Remember to restart your rails server when working with these.</p>

<p>Should these tasks not meet your needs, you can always create a custom rake task to do exactly what you need.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Custom Rake Tasks and Using Them With ERD]]></title>
    <link href="http://annaershova.github.io/blog/2015/10/13/making-simple-rake-tasks/"/>
    <updated>2015-10-13T08:52:15-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/10/13/making-simple-rake-tasks</id>
    <content type="html"><![CDATA[<p>I started making my own rake tasks recently to help with specific repetitive tasks that I need to do while working on projects.</p>

<p>Rake is a project of Jim Weinrich; check out his rationale for making rake <a href="http://rake.rubyforge.org/files/doc/rational_rdoc.html">here</a>.</p>

<p>My favorite part is his explanation of why it is called rake. No, it has nothing to do with garden tools. It was supposed to be a portmanteau of <strong>&lsquo;ruby&rsquo;</strong> and <strong>&lsquo;make&rsquo;</strong> (since Rake was inspired by Makefile). Hence, rake.</p>

<p><strong><code>rake -T</code></strong> will give you a list of rake tasks available for a given project.</p>

<p>This is what it looks like for a standard octopress directory:</p>

<p><img class="center" src="http://annaershova.github.io/images/take_t.png"></p>

<p>So if I forget that my normal routine is <strong><code>rake generate</code></strong> followed by <strong><code>rake preview</code></strong>, I can see it listed above.</p>

<p>I was working with the <a href="https://github.com/voormedia/rails-erd">erd</a> gem, which uses <a href="http://www.graphviz.org/">Graphviz</a> to visualize complex database relationships in rails. If you want to understand what exactly is happening in your schema, it&rsquo;s the gem for you.</p>

<p>I haven&rsquo;t used it in a bit, so I googled it, and <a href="https://ryanboland.com/blog/creating-a-database-diagram-with-rails-erd/">this tutorial</a> popped up.</p>

<p>It had a suggestion to make a simple rake task to run the erd command with specific attributes to get just the type of a diagram you want:</p>

<pre><code class="``ruby desc 'Generate Entity Relationship Diagram'">  task :generate_erd do
    system "erd --inheritance --filetype=dot --direct --attributes=foreign_keys,content"
    system "dot -Tpng erd.dot &gt; erd.png"
    File.delete('erd.dot')
  end
</code></pre>

<p>The idea there is have a task that runs <strong><code>erd --inheritance --filetype=dot --direct --attributes=foreign_keys,content</code></strong>. The system then generates a <strong><code>.dot</code></strong> file, which is when converted into a <strong><code>.png</code></strong> file, with the rationale being that Graphviz has issues generating files that are not <strong><code>.dot</code></strong>.</p>

<p>You can just put it in a rake file, or run <strong><code>rails g task erd generate_erd</code></strong>. It adds a <strong><code>erd.rake</code></strong> file to <strong><code>lib/tasks</code></strong> (or you can add one manually and just type your code instead of using a generator).</p>

<p>To use that task, you type <strong><code>rake erd:generate_erd</code></strong> in your Terminal.</p>

<p>I ended up using these rake tasks to demonstrate the idea behind using namespace. They generate a <strong><code>png</code></strong> file as per an example above and a default <strong><code>pdf</code></strong> one:</p>

<p><img class="center" src="http://annaershova.github.io/images/rake_commands.png"></p>

<p>And running these tasks in Terminal:</p>

<p><img class="center" src="http://annaershova.github.io/images/rake_terminal.png"></p>

<p>And you are done! Two file types of database schema charts have been generated:</p>

<p><img class="center" src="http://annaershova.github.io/images/erd_directory.png"></p>

<p>NB: if all you wanted was to simplify running one long command (such as the aforementioned <strong><code>erd --inheritance --filetype=dot --direct --attributes=foreign_keys,content</code></strong>), you could just create a shell alias that you could then use across all your projects if they have erd installed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Uptime and Reboot Stats]]></title>
    <link href="http://annaershova.github.io/blog/2015/10/12/mac-uptime-and-reboot-stats/"/>
    <updated>2015-10-12T11:46:01-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/10/12/mac-uptime-and-reboot-stats</id>
    <content type="html"><![CDATA[<p>While we are on a subject of controlling your Mac from your Terminal, here is something else that is useful:</p>

<p>Mac uptime is how long it has been since the system has been re-booted or re-started. Type in <strong><code>uptime</code></strong> in your Terminal, and you will see the stats in minutes, hours, or days, depending on how long it has been for your Mac:</p>

<p><img class="center" src="http://annaershova.github.io/images/uptime.png"></p>

<p>(I just re-booted when installing a new OS X hence such a short uptime for me. Uptime can extend into months for some users as Macs tend to be very stable unlike Windows machines.)</p>

<p>You will also see number of users using your machine during said uptime as well as load averages in 1, 5, and 15 minute intervals from left to right &ndash; mine actually indicate I may want a more powerful system.</p>

<p>Run <strong><code>last reboot</code></strong>  to see rebooting history:</p>

<p><img class="center" src="http://annaershova.github.io/images/lastreboot.png"></p>

<p>Another neat trick is to run in <strong><code>last</code></strong> to see last sessions of users, hosts and ttys in a reverse chronological order:</p>

<p><img class="center" src="http://annaershova.github.io/images/last.png"></p>

<p>There are handy gadgets for uptime and reboot stats, but I doubt that most regular users would really need them on a regular basis. Checking in with your Terminal now and then should be sufficient.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating OS X From Your Command Line]]></title>
    <link href="http://annaershova.github.io/blog/2015/10/12/updating-os-x-from-your-command-line/"/>
    <updated>2015-10-12T11:16:32-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/10/12/updating-os-x-from-your-command-line</id>
    <content type="html"><![CDATA[<p>I am really used to seeing a pop up that says something along the lines of <strong><code>a new version of OS X / iOS is available, do you want to update now?</code></strong></p>

<p>Upon some research on potential issues of an update in question (I learned the hard way after having my iPhone bricked post-update when living in China), I generally go back and click <strong><code>update</code></strong>. But there is actually an easy way to do it from your Terminal. All you need is a <strong><code>softwareupdate</code></strong> command.</p>

<p>Type in <strong><code>man softwareupdate</code></strong> to see this command&rsquo;s manual:</p>

<p><img class="center" src="http://annaershova.github.io/images/softwareupdatemanual.png"></p>

<p>Run <strong><code>softwareupdate -l</code></strong> to see available updates. You will see something like this:</p>

<p><img class="center" src="http://annaershova.github.io/images/softwareupdate_l.png"></p>

<p>While you are at it, you can turn on automatic update checker from your Terminal: <strong><code>sudo softwareupdate --schedule on</code></strong> (<strong><code>off</code></strong> to disable it).</p>

<p><img class="center" src="http://annaershova.github.io/images/softwareupdateautomaticcheck.png"></p>

<p>Then run this to install the specific update you want: <strong><code>sudo softwareupdate --install UPDATE_NAME</code></strong></p>

<p><img class="center" src="http://annaershova.github.io/images/supdinstall.png"></p>

<p>(Use the <strong><code>-d</code></strong> flag to just download the update, but not install it.)</p>

<p>And of course to re-boot your computer, you can simply run this command instead of going through the Mac menu: <strong><code>sudo shutdown -r now</code></strong></p>

<p><img class="center" src="http://annaershova.github.io/images/shutdown.png"></p>

<p>Voila!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Edge Rails -- Living Dangerously]]></title>
    <link href="http://annaershova.github.io/blog/2015/10/11/running-edge-rails-living-dangerously/"/>
    <updated>2015-10-11T18:43:11-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/10/11/running-edge-rails-living-dangerously</id>
    <content type="html"><![CDATA[<p>Rails is constantly being updated and improved. Sometimes, the changes that have been announced are just too exciting to wait for an official release.</p>

<p>When I first read about ‘Edge Rails’, I was quite confused because it sounded like yet another JS library. Then when I was reading The Rails Way (Amazon <a href="http://www.amazon.com/The-Rails-Way-Obie-Fernandez/dp/0321445619">link</a> if you have somehow never heard of it), I realized I had been mistaken.</p>

<p>Grammatically speaking, it should be spelled <em>edge Rails</em>, as in lowercase <em>e</em>. But that is really between you and your text editor. In this context, ‘edge' just means the latest, cutting-edge version of Rails that has not been officially released yet.</p>

<p>Rails 5 looming upon us, but there is no official release date. I gather the best guess is late 2015 — early 2016. It does have some exciting features, such as merging of the rails-api gem / built-in support of the JSON APIs). So what do you do if you want to play around with that and don’t want to wait until the official release?</p>

<p>Ruby -v to see if you are using ruby 2.2.2+  as Rails 5 requires it. Use rvm to make sure you are running a suitable version.</p>

<p>The best instructions to install edge Rails can be found <a href="http://www.christopherbloom.com/2015/04/26/setting-up-a-rails-5-app-from-edge/">here</a> on Christopher Bloom&rsquo;s blog — they are straightforward and and I used them successfully, so I’d rather send you to the source than to copy-paste them here.</p>

<p>RailsGuides has an <a href="http://edgeguides.rubyonrails.org/">EdgeGuides</a> section specifically targeting the current master branch of the Rails repo.</p>

<p>Running edge Rails comes at a cost of potentially unstable dependencies. Having said that, it is not <em>that</em> unstable. Rails has a very extensive test coverage, which should help prevent regressions.</p>

<p>So do you want to run edge Rails? Probably not, unless you really plan to take advantage of groundbreaking unleashed feature or if you are particularly curious. But it’s nice to know it’s there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[And the New App Is Done]]></title>
    <link href="http://annaershova.github.io/blog/2015/08/08/and-the-new-app-is-done/"/>
    <updated>2015-08-08T19:15:00-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/08/08/and-the-new-app-is-done</id>
    <content type="html"><![CDATA[<p>Behold &ndash; a real <a href="http://theweatherproject.herokuapp.com/">app</a>!</p>

<p>We used meteorological knowledge to convert weather forecasts into a &lsquo;real-life&rsquo; weather forecast. It takes into account humidity and wind speed for a variety of different scenarios to tell you what will it actually feel like outside in the next 36 hours. Some days, it will feel colder / cooler than what the weather forecasts say, and some days it will much hotter / warmer.</p>

<p>This was really fun to work on, and I really enjoyed making something useful &ndash; I have been using it every day to make sartorial choices and to figure out best time of the day to run outside.</p>

<p>And it&rsquo;s sassy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project Mode -- Week 1, Day 2]]></title>
    <link href="http://annaershova.github.io/blog/2015/07/29/project-mode-week-1/"/>
    <updated>2015-07-29T11:08:32-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/07/29/project-mode-week-1</id>
    <content type="html"><![CDATA[<p>&hellip;and we are officially in Project Mode here at the Flatiron School, working on project 1 of 2, which is meant to be a short project to be conceptualized, pitched, designed, built, and presented within a scope of 5 business days.</p>

<p><a href="https://youtu.be/7fx6AknguzI">Here</a> is a very short video showcasing functionality that we have built in 2 days. We have deployed to Heroku since the video was made, which turned out to be much easier than expected, minus some fiddling with the Figaro gem.)</p>

<p>Primary goal right now is to make it aesthetically pleasing.</p>

<p>It looks fairly simple, but it actually features some pretty advanced weather-related logic. Who would have thought that energy trading background would come in handy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On a Scale of Dalai Lama to Kanye West, How Narcissistic Are You? A Rails App That Lets You Find Out Just That.]]></title>
    <link href="http://annaershova.github.io/blog/2015/07/26/twitter-sentiment-analysis-rails-app/"/>
    <updated>2015-07-26T09:32:26-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/07/26/twitter-sentiment-analysis-rails-app</id>
    <content type="html"><![CDATA[<p>For a small side project to be shared with our Flatiron School classmates and some <a href="http://www.meetup.com/Flatiron-School-Presents/">Flatiron School Presents Meetup</a> guests, my partner Mitch and I decided to build an app that measures people&rsquo;s narcissism levels via their Twitter feed. A linguistic analysis-baased social insights algorithm, if you will.</p>

<p><img class="center" src="http://annaershova.github.io/images/kanye-meme.png"></p>

<p>(meme taken from <a href="http://knowyourmeme.com/photos/688363-kanye-west">here</a> &ndash; spoiler alert for celebrities' narcissism levels)</p>

<p>Much has been said and done and invested into when it comes to social media sentiment analysis in finance, with many financial institutions investing heavily in it. A cursory Google search offers up names of many start-ups involved in mining, mapping, analyzing, and plain having fun with Twitter. We figured that as tech professionals, working with social media and building a fun prototype for understanding the tools and the medium is a valuable experience.</p>

<p>Our original idea was parsing through people&rsquo;s Instagram feed to see how many posted photos were selfies for a better narcissism indicator, but considering advanced facial recognizition technology needed and the fact it was meant to be a small side project executed while carrying on a full school work load, we have settled on the twitter-based project.</p>

<p>The <a href="https://github.com/sferik/twitter">Twitter gem</a> made working with Twitter a breeze, although there were limitations for how many posts could be parsed through at once and of course the max number of timeout requests every minute.</p>

<p>We designed everything through the use of good ol' Rails New NarcissismProject. We had one user model that we worked with.</p>

<p>The front page invites a user to check how narcissistic the are by entering a twitter handle (which will work whether or not prefixed with an @ to make user&rsquo;s life easier; we have also allowed for the first or last typed character to be blank space in case a user is very space-key-trigger-happy; other than that, the handle has to follow Twitter rules as ensured by a RegEx check):</p>

<p><img class="center" src="http://annaershova.github.io/images/narcissism-app-front-page.png"></p>

<p>Once a user enters a twitter handle, it parses their feed for key narcissism-related words that we have pre-determined in the app; it then checks it against a scale of celebrities. It then returns user&rsquo;s score and their celebrity match (mine is Flatiron School&rsquo;s very own <a href="https://twitter.com/aviflombaum">Avi Flombaum</a>)</p>

<p>We don&rsquo;t share the celbrity scale on the app, as it is more fun for the user to discover it him/herself. To built it, we have parsed through the top 100 most-followed twitter accounts (most of which are individual celebrities) and some more and scored them. We then picked some representatives for each scale gradation, throwing in a few Flatiron School-related Easter Eggs, just for fun. If this was a commercial product, we would have to update the celebrity scale just in case some of them go into narcissism rehab or new self-loving celebrities merger.</p>

<p>Most of our findings were unsurprising: Dalai Lama and the Pope were at the very bottom (with Dalai Lama being slightly less narcissistic and thus representing no. 1 on our scale); Kanye West was 9 out of 10 (beat only by the likes of Lena Dunham); Mr. West was closely followed by Kim Kardashian in the 8th place. To me, this means that are simplistic prototype algorithm actually works!</p>

<p>I stopped to pondered if it is unethical to make fun of people&rsquo;s narcissism levels, but considering the celeberities that came up on top and their interest in self-promotion, I figured out their high tankings it would be quite a compliment to them (I am really, really tempted to tweet Mr. West and ask him how he feels about being outdone by Ms Dunham).</p>

<p>What turned out to be incredibly fun was soliciting our friends' and classmates' twitter handles and checking their narcissism levels. A few were truly off-the-charts! (We even had to design more model logic for those cases) The top 10 narcissistic twitter handles are then saved separately and published on the Top 10 page &ndash; with many people I know outdoing our celebrities of choice. Uh oh.</p>

<p>A short demo video can be found <a href="http://youtu.be/T_tTweOvDqs">here</a> &ndash; YouTube link.</p>

<p>And here is a link to the Github <a href="https://github.com/mitchellhart/twitter_analyzer">repo</a>.</p>

<p>I will update this post once the app actually goes live as is our goal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Rotate a Matrix in Ruby]]></title>
    <link href="http://annaershova.github.io/blog/2015/07/22/how-to-rotate-a-matrix-in-ruby/"/>
    <updated>2015-07-22T17:58:06-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/07/22/how-to-rotate-a-matrix-in-ruby</id>
    <content type="html"><![CDATA[<p>Here is a problem that I recently stumbled upon while researching something completely different, as these things usually go, &ndash; and down the rabbit hole I went.</p>

<p>How does one rotate a matrix?</p>

<p>First of all, let&rsquo;s define parameters of the exercise. We will take a matrix &ndash; an array of arrays &ndash; and turn it 90&deg; clockwise.</p>

<p>So this is what it would look like, using Flatiron&rsquo;s whiteboard table tops (we are really a paper-free school):</p>

<p><img class="center" src="http://annaershova.github.io/images/matrix-rotation-example.png"></p>

<p>As you can see, numbers 1 (position[0][0] in zero-indexed terms) and 9 (position [2][2]) traded places. One thing is immediately obvious: this would only work if the matrix in question is &lsquo;square&rsquo;: that is, if there are x many rows with x many elements each.</p>

<p>Now that we have defined that condition, let&rsquo;s start with a simple 3x3 matrix.</p>

<p>If the original array looks like this, Ruby-style:</p>

<blockquote><p>my_array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</p></blockquote>

<p>The modified array would look like this:</p>

<blockquote><p>rotated_array = [[7, 4, 1], [8, 5, 2], [9, 6, 3]]</p></blockquote>

<p>But how to get there?</p>

<p>Ruby actually comes with default methods that allow one to manipulate arrays. Most people know <em>pop</em>, <em>shift</em>, <em>unshift</em>, and <em>drop</em>, but there are way more useful methods.</p>

<p>I was only marginally familiar with <em>rotate</em>, so here is an example:</p>

<p>According to the <a href="http://ruby-doc.org/core-2.2.2/Array.html#method-i-rotate">docs</a>:</p>

<blockquote><p>Returns a new array by rotating self so that the element at count is the first element of the new array.</p></blockquote>

<p>When using it without an argument (or rather with the default count of 1), it works like this:</p>

<p><img class="center" src="http://annaershova.github.io/images/rotate_simple_example.png"></p>

<p>It effectively takes the first part of the array and places it at the end of the array. If we use that 5 times on the array with 5 elements, we will arrive at the original array (well, it will return what looks like the original array as the original array does not get modified).</p>

<p>If used with a count that is not 1, it will move the elements down by the count number of places:</p>

<p><img class="center" src="http://annaershova.github.io/images/rotate_example_with_count2.png"></p>

<p>(array.rotate(2) is the same as <em>array.rotate.rotate</em>)</p>

<p>Count can also be negative, in which case it will rotate the array in the opposite direction, taking items from the end of the array and placing them in the front:</p>

<p><img class="center" src="http://annaershova.github.io/images/rotate-example-count-negative.png"></p>

<p>As many other methods, it can be used with the bang to modify the original array: <em>return!</em></p>

<p>I played around with <em>rotate</em>, and it became clear that I was going to need something else to complete the task:</p>

<p><img class="center" src="http://annaershova.github.io/images/rotate-example.png"></p>

<p>It handily re-arranged the nested components in the array, moving each &lsquo;inner&rsquo; array over by 1 at a time.</p>

<p>There is also <a href="http://apidock.com/ruby/Array/transpose">transpose</a>. It is actually a bit trickier to comprehend:</p>

<p><img class="center" src="http://annaershova.github.io/images/transpose-simple-example.png"></p>

<p>For a nested array that contains 2 array of 2 elements each, it seems like all it does is switch elements that are in the [1][0] and [0][1] position with each other &ndash; in case below, only 2 and 3 traded places. But what is actually does, as becomes more obvious in case of a larger array (nexted with 3 arrays of 3 elements each) is make columns rows and rows columns.</p>

<p>Here is an example:</p>

<p><img class="center" src="http://annaershova.github.io/images/transpose-example.png"></p>

<p>Unlike <em>rotate</em>, <em>transpose</em> does not take any arguments.</p>

<p>By the way, although I won&rsquo;t be using it here, one of my favorite array methods is also <em>flatten</em>, which is a handy way to get nesting out of arrays:</p>

<p><img class="center" src="http://annaershova.github.io/images/flatten-example.png"></p>

<p>As an aside, <em>flatten</em> is is also a handy way of converting a hash into a simple array:</p>

<p><img class="center" src="http://annaershova.github.io/images/hash-flatten-example.png"></p>

<p>But back to the task at hand:</p>

<p>Upon experimenting with <em>rotate</em>, <em>flatten</em>, and <em>transpose</em>, I think I came up with a pretty efficient technique using <em>transpose</em> and then <em>reverse</em>:</p>

<p><img class="center" src="http://annaershova.github.io/images/rotation-execution-example.png"></p>

<p>The array is first transposed and then iterated over, and each of the nexted arrays inside it is reversed.</p>

<p>Works like a charm. But if you want to do something slightly more exciting:</p>

<p>Let&rsquo;s look at the origin array again:</p>

<blockquote><p>my_array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</p></blockquote>

<p>And at the rotated_array:</p>

<blockquote><p>rotated_array = [[7, 4, 1], [8, 5, 2], [9, 6, 3]]</p></blockquote>

<p>For a zero-indexed language, the nested array will look like this, positions-wise:</p>

<p>[6,3,0]<br>
[7,4,1]<br>
[8,5,2]<br></p>

<p>OR:</p>

<p>(position of first element (0 in this case) + 2*3) + (position of first element + 3*1 ) + (position of first element + 3*0)
(position of second element + 2*3) + (position of first element + 3*1 ) + (position of second element + 3*0)
(position of third element + 2*3) + (position of third element + 3*1 ) + (position of third element + 3*0)</p>

<p>Or for a nested array:</p>

<p>[[2][0],[1][0],[0][0]],<br>
[[2][1],[1][1],[0][1]],<br>
[[2][2],[1][2],[0][2]]<br></p>

<p>Which is:</p>

<p>[[my_array.length-1][my_array.length-3],[my_array.length-2][my_array.length-3],[my_array.length-3][my_array.length-3]],<br>
[[my_array.length-1][my_array.length-2],[my_array.length-2][my_array.length-2],[my_array.length-3][my_array.length-2]],<br>
[[my_array.length-1][my_array.length-1],[my_array.length-2][my_array.length-1],[my_array.length-3][my_array.length-1]]<br></p>

<p>This would be a cool structure to use if pushing things into the array (I am using absolute positions instead of array.length-related as it is easier in this example):</p>

<p><img class="center" src="http://annaershova.github.io/images/pushing-into-rotated-array.png"></p>

<p>(as you can see I made a typo and then fixed it)</p>

<p>All you need to do thereafter is convert it into a nested array.</p>

<p>You can also do a chain of push statements:</p>

<p><img class="center" src="http://annaershova.github.io/images/push-chain.png"></p>

<p>All of these are pretty fun solutions to the problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RegEx Is Just Like Mandarin Chinese]]></title>
    <link href="http://annaershova.github.io/blog/2015/07/21/regex-is-just-like-mandarin-chinese/"/>
    <updated>2015-07-21T08:26:33-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/07/21/regex-is-just-like-mandarin-chinese</id>
    <content type="html"><![CDATA[<p>When I was in primary school in Russia, we had an intro to computer science class that taught up the basics of programming to produce good post-Communist STEM-oriented comrades. It used Basic to teach the fundamentals. As I spoke no English at the time, I spent more time memorizing words like GOTO and GOSUB than actually figuring out coding logic.</p>

<p>English speakers have a very distinct advantage when it comes to programming in most languages: we know all the words already. One doesn&rsquo;t even have to be an actual native speaker: Ruby was famously written by a Japanese programmer.</p>

<p>Whether a native speaker or not, it is a lot easier to memorize certain methods in Ruby (see: any?; none?; all?) when one actually understands how to use those words in a sentence.</p>

<p>Learning to code is comparable to learning a foreign language: a large part of it is comprehending the principles and then complementing it with memorizing quirks of grammar.</p>

<p>I compared SQL to German in class before. German is a very structured language where sentences have to be built and organized a very certain way, just like SQL.</p>

<p>Compare that to an Eastern European language, where we take major liberties with positioning words in a sentence. I used to tutor Russian as an undergrad at Yale; I remember students coming to me panicking because they could not figure out why subjects and objects were creatively arranged in a sentence and what to do about it. All I could say at the time is they were lucky because they did not learn Ukrainian, which has same creativity, by more complex grammar.</p>

<p>Ruby feels like an Eastern European language to me &ndash; there are many ways to write code, but there are still very specific &lsquo;grammar&rsquo; rules one needs to follow to make code &lsquo;grammatically correct.&rsquo; The stakes of course are differnet: while one can make oneself understood and convery the message well in broken Russian, Ruby won&rsquo;t run broken code at all or run it incorrectly.</p>

<p>Here is the problem with RegEx: it is just like Mandarin Chinese. Judging by the number of desperate, hate-filled posts on StackOverflow, it is as hard to learn.</p>

<p>Mandarin Chinese, and most its other dialects of Chinese actually have no well-developed grammar. There are ways to structure sentences, but there are no 7 cases of Ukrainian or 12 tenses of English. Past tense is barely denoted, yet alone formed in a miriad ways that hapless students of Germanic languages spend years memorizing.</p>

<p>When I first started Ruby, I routinely had to spend a fair bit of time ensuring I had an appropriate number of &lsquo;end&rsquo; key words: one to end an if statement, one to end a do block, one to end a method, one to end a class&hellip; That&rsquo;s a lot of &lsquo;grammar&rsquo; to learn &ndash; but at least we all know what the word &lsquo;end&rsquo; means, so that makes it easier. With RegEx, you have to poke around various seemingly randomly assigned symbols and hope that they work. Just like with Mandarin, half the time you are hoping you are refering to the correct character that has no real linguistic content and that you are using it correctly.</p>

<p>For a project in class, I had to write the following expression to validate a potential twitter handle: /^[A-Za-z0-9<em>]{1,15}|^@[A-Za-z0-9</em>]{1,15}/. It&rsquo;s not technically that difficult, but who decided that ^ stands for start of line? Or that $, for that matter, stands for end of line? Or that &lsquo;a?&rsquo;&lsquo; means zero or more of soemthing?</p>

<p>There might be some internal logic to it, just like with Chinese (vestiges of old-school computer science perhaps?), but for a modern-day person without much linguistic&hellip;I mean computer science background, it is not intuitive.</p>

<p>On top of that, to use RegEx is like writing an application without a good test suite: you think that you have thought of everything, but there is always that one edge case that can pop up and screw it over. I felt like that when learning Mandarin: something always pops up where the word has a diferent meaning or is really meant to be used with a different character to really &lsquo;work.&rsquo;</p>

<p>The good news is that both RegEx and Mandarin are possible to master. Perseverance and a healthy amount of grunt work is key. But just like Mandarin is handy for freaking out Chinese restaurant employees and nail salon workers, RegEx is handy too &ndash; in fact, it might have a greater utility of being used oftenf or the rest of one&rsquo;s Web Development career.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Don't Like Semicolons]]></title>
    <link href="http://annaershova.github.io/blog/2015/07/17/why-ruby-is-not-javascript/"/>
    <updated>2015-07-17T20:40:56-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/07/17/why-ruby-is-not-javascript</id>
    <content type="html"><![CDATA[<p>So I started learning Javascript.</p>

<p>They say that once you understand basic coding principles, learning a new programming language is mostly a matter of figuring out syntax and getting used to whatever special tricks that language has to offer. It certainly seems to be the case with this Ruby to JS transition.</p>

<p>But I certainly miss the syntactic sugar that Ruby gives us &ndash; and what is with all the curly brackets and the semicolons?!</p>

<p>Consider Project Euler Problem I (summing up multiples of 3 and 5 from 1 to 999).</p>

<p>There is just so much we can do with it in Ruby:</p>

<p><img class="center" src="http://annaershova.github.io/images/projecteulerp1ruby.png"></p>

<p>And here comes JavaScript:</p>

<p><img class="center" src="http://annaershova.github.io/images/projecteuler1js.png"></p>

<p>But just like mastering a foreign language that allows one to express oneself in a new and expanded way (as an example, google &lsquo;toska&rsquo; and &lsquo;Nabokov&rsquo; &ndash; Russians take melancholy to a whole new level that does not exist in any other language), JavaScript offers something pretty cool: <em>for (var x = 0; x &lt; 1000; x++)</em> &ndash; now that is one handy way to guide one&rsquo;s iteration. I sort of wish Ruby had that&hellip;</p>

<p>But for now, I need a T-shirt that says &lsquo;I don&rsquo;t really like semicolons.&rsquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project Euler Problem 1, or Benchmarking Ruby Code]]></title>
    <link href="http://annaershova.github.io/blog/2015/07/07/project-euler-problem-1/"/>
    <updated>2015-07-07T05:56:19-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/07/07/project-euler-problem-1</id>
    <content type="html"><![CDATA[<p>Everyone loves a good coding challenge. But where do you find good brainteasers outside of StackOverflow&rsquo;s endless Ruby 101 questions?</p>

<p>Enter <a href="https://projecteuler.net/">Project Euler</a>. At 513 problems and counting, it is a great way to practice both your math and coding skills.</p>

<p>Many of the initial problems are on the easier side, and when I was assigned <a href="https://projecteuler.net/problem=1">Problem 1</a>, it did not take long to figure out how to approach solving it:</p>

<blockquote><p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</p>

<p>Find the sum of all the multiples of 3 or 5 below 1000.</p></blockquote>

<p>We were supposed to code both a &lsquo;regular&rsquo; procedural and an object-oriented solution.</p>

<p>Here is a very quickly written procedural one in a lab context (the two methods used and their names came from rspec suite):</p>

<p><img class="center" src="http://annaershova.github.io/images/pe1procedural.png"></p>

<p>It&rsquo;s pretty straightforward. There is a simple loop to find all the multiples of 3 or 5 and push them into an array; inject method is then used to sum up all of them (yes, one can iterate over the array instead, but inject is perfect for summing or multiplying array contents, so I was not going to bother).</p>

<p>It works perfectly fine &ndash; the answer is 233168, by the way.</p>

<p>But then I got thinking: there are just <em>too many lines of code</em>, and writing them is not exactly efficient. I create an empty array; I create a variable with initial value of 3 (or 1, but our common sense tells us we don&rsquo;t need 1 and 2 anyway), I increment by 1; I push things into the array. It just feels like too much effort.</p>

<p>So for the &lsquo;object-oriented solution&rsquo;, I made things a little more elegant:</p>

<p><img class="center" src="http://annaershova.github.io/images/pe1oo.png"></p>

<p>That is easier to read and it just <em>looks</em> a lot better, and it produces the same result. But ultimately, it is not enough for code to be handsome, it also has to be fast and efficient. It was a good chance to use Ruby&rsquo;s <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/benchmark/rdoc/Benchmark.html">Benchmark Module</a> to see if one solution was preferable to another due to it being faster.</p>

<p>Quoting straight from the source:</p>

<blockquote><p>The Benchmark module provides methods to measure and report the time used to execute Ruby code.</p></blockquote>

<p>It is pretty straightforward. One has to &lsquo;require 'Benchmark&rsquo; and then use Benchmark.measure { <em>whatever expression one is evaluating</em> } &ndash; use &lsquo;puts&rsquo; to see the actual outcome.</p>

<p>My initial plan was to benchmark my &lsquo;longer&rsquo; loop solution vs. select vs. a similarly-coded reject solution, vs. several conditions ( using || for modulo or using min) and see if one was preferable to another.</p>

<p>So I ran benchmark on the select statement. And then I ran it again on the same statement. And again. And the processing times were different. And again &ndash; still different. Here is what it ended up looking like:</p>

<p><img class="center" src="http://annaershova.github.io/images/benchmarkselectcomparison.png"></p>

<p>The time on the right is &lsquo;elapsed real time&rsquo;, which is basically time it took the program to run from beginning to and end.</p>

<p>Since the unit of time in which the output is shown is seconds, the amount of time it takes to execute is very small. In the 14 examples above, we are talking the slowest example taking just above a millisecond.</p>

<p>But I expected running the <em>same</em> line of code to take the <em>same</em> time each and every time. After all, there are no random number generators in that code, and Ruby should evaluate the line of code in the same order each time &ndash; the result doesn&rsquo;t change, why would processing time?</p>

<p>What&rsquo;s interesting about Benchmark is that it is affected by CPU, and your CPU will be running differently every time you run Benchmark. Although it took me several seconds before benchmarking attempts in the example above, and I did not start of exit any new software (or Chrome Tabs) in between attempts, my CPU clearly was doing different things at the time, hence the time variations.</p>

<p>So how is one supposed to benchmark one process against another if it is also affected by &lsquo;outside&rsquo; factors such as whatever else your computer is doing in the background? The trick is to run your line of code against the other ones multiple times simultaneously, and then average processing times.</p>

<p>There is a very handy solution suggested in the documentation, which I have used to run 5 different statements 100 times and then evaluate results:</p>

<p><img class="center" src="http://annaershova.github.io/images/benchmarkingcode.png"></p>

<p>Here is the outcome, run within 3 seconds of each other:</p>

<p><img class="center" src="http://annaershova.github.io/images/benchmarkingcomparison.png"></p>

<p>While the absolute numbers are different each time benchmarking is run, the relative numbers remain the same (I ran it a few more dozen times and charted it, but I won&rsquo;t bore you with the details).</p>

<p>The fastests solutions were using logical operators vs. applying min&lt;1 &ndash; the latter took at least 2.5x longer than the 3 solutions that used Boolean operators &ndash; can you guess why?</p>

<p>However &ndash; all of the evaluted solutions took well under a second, so it is not really significant for this particular problem. But speed is a major concern for many industries (see a very interesting NYTimes article that discusses how it applies in finance (<a href="http://www.nytimes.com/2014/04/14/opinion/krugman-three-expensive-milliseconds.html?_r=0">article here &ndash; paywall</a>)).</p>

<p>Certain companies employ entire teams of people whose job description is to shave off milliseconds of algorithm running times. While Ruby&rsquo;s Benchmarking module is not powerful enough for those commercial purposes, it is a fun way to experiment with the code one writes to see how it compares against other options.</p>
]]></content>
  </entry>
  
</feed>
