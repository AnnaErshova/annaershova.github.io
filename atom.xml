<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Anna's Blog]]></title>
  <link href="http://annaershova.github.io/atom.xml" rel="self"/>
  <link href="http://annaershova.github.io/"/>
  <updated>2015-06-14T19:09:33-04:00</updated>
  <id>http://annaershova.github.io/</id>
  <author>
    <name><![CDATA[Anna Ershova]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elegance of Code Part I]]></title>
    <link href="http://annaershova.github.io/blog/2015/06/14/elegance-of-code-part-i/"/>
    <updated>2015-06-14T00:00:00-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/06/14/elegance-of-code-part-i</id>
    <content type="html"><![CDATA[<hr />

<p>layout: post
title: &ldquo;Elegance of Code &ndash; Part I&rdquo;
date: 2015-06-14 18:43:27 -0400
comments: true</p>

<h2>categories: </h2>

<p>When one first starts coding, the main concern is writing something that works and produces desired result.</p>

<p>You get irb to output &ldquo;Hello World!&rdquo; &ndash; excellent. Then you get a nested hash-array monster to return a very specific key hidden 7 levels deep &ndash; great. Then you write your CLI interface that runs in your command line and shows scraped data from your fellow students' bio &ndash; good job. And you even use cowsay to format interactions with the user and format command line output using escape sequences, so that user interface looks less boring. And when you hit rspec, most tests pass.</p>

<p>And then the next task comes &ndash; how do you make your actual code look good?</p>

<p>“Code so beautiful that tears are shed.” — Why’s Poignant Guide to Ruby</p>

<p>So how do you write code that indeed is so beautiful and elegant that tears will be shed by those reading your pull request?</p>

<p>There are multiple parts to the puzzle, but let&rsquo;s start with aesthetics of formatting first.</p>

<p>Do you remember when Avi said that he had been looking at our code, and we all needed to abide by basic indentation and not leave not-working code bits floating around commented out?</p>

<p>Ruby is perfectly fine with reading your code without any and all indentations and any real formatting. It can easily ignore all the hashed-out random comments. But once the code we read and write gets more and more complex, us humans really benefit from proper formatting to figure out what goes where &ndash; especially when the code is revisited at a later point and no one remembers anymore what it was really supposed to do.</p>

<p>To use proper formatting is also kind to anyone who might work on the code after you, so that they won&rsquo;t have to spend hours doing forensic coding and figuring out what end statement closes what block.</p>

<p>And it is simply and elegant thing to do. And it&rsquo;s Step 1 to Writing Elegant Code.</p>

<p>You know how when you went to college you had to format your essay footnotes a very specific way using a style manual or a helpful website or two? Well, there is a Ruby style manual, too!</p>

<p><a "href=https://github.com/airbnb/ruby">The Airbnb Ruby Style Guide</a> is what I suggest as a reference for all the formatting questions that are keeping you up at night.(Airbnb website is in Ruby and Ruby on Rails by the way &ndash; see, real companies use it!)</p>

<p> It is is a very comprehensive but not excessively lengthy GitHub repo that will answer most of the questions you have ever had about, say, indenting when and case together — turns out they are supposed to be indented at the same level! (That means if I re-visit some earlier labs, cosmetic edits will need to be made.) The best part if, anyone is welcome to contribute and submit a pull request &ndash; and maybe your take on comment indentation will be shared with the next generation of newbie developers.</p>

<p>Now, if there was only a website that did my Ruby code formatting for me&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beautifying Non-Working Blog Posts]]></title>
    <link href="http://annaershova.github.io/blog/2015/06/09/beautifying-non-working-blog-posts/"/>
    <updated>2015-06-09T22:02:40-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/06/09/beautifying-non-working-blog-posts</id>
    <content type="html"><![CDATA[<p>Avi said on Day 1 of Flatiron School: don&rsquo;t fix non-functioning code. But how about editing a non-working blog post?</p>

<p>I had a post all written up and ready to go. It was about ways to iterate over arrays and had several A4 pages' worth of text (come to think of it, it’s a good thing that post did not happen).</p>

<p>I did some edits on it over the weekend, polishing my style, planning my fancy markup, and inserting clever programmer jokes  (“Make me a sandwich” “No” “Sudo make me a sandwich” “Sure”).</p>

<p>All I had to do was set up Octopress and deploy it, which I conveniently postponed until the night before it was due. Because what could go wrong?</p>

<p>Many things, as it turned out.</p>

<p>I think I was the only person in my cohort (are there 27 of us? seems that we never did a headcount) who had issues setting up GitHub pages.</p>

<p>While everyone seemed to have their nice and shiny parts of cyberspace in which to share their musings with the outside world, mine never allowed me deploy the mandatory &ldquo;hello world&rdquo; post.</p>

<p>Several hours of feverish stack overflow-ing and tortured troubleshooting later (I would rather solve Hashketball both times all over again), it still wasn&rsquo;t working.</p>

<p>After several more hours of precious instructor time (thank you, Rose!), we all threw our hands in the air, rm -rf'ed existing directories, deleted GitHub repos, and started from scratch. And it worked, ad oculos.</p>

<p>We figured out what happened, but not how. It looks like GitHub Pages gave me setup meant for companies instead of private individuals. Octopress was not enthused about me being Anna Ershova LLC and refused to produce a live page.</p>

<p>But we re-did it from scratch and that fixed it. And by then I had realized that Avi was right. I spent too much time on writing and editing my post, without trying to see if it would even go through. Murphy’s Law dictates that it is the very situation when it wouldn’t.  So instead of using my original post, I am writing this one as a very public note to self to not get caught up in aesthetics of things if I don&rsquo;t even know if they are going to work.</p>

<p>And those dozens of ways to iterate over arrays? Brace yourselves, I&rsquo;ll come back to that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Post on Octopress]]></title>
    <link href="http://annaershova.github.io/blog/2015/06/09/my-first-post-on-octopress/"/>
    <updated>2015-06-09T19:10:35-04:00</updated>
    <id>http://annaershova.github.io/blog/2015/06/09/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>&ldquo;hello world&rdquo;</p>
]]></content>
  </entry>
  
</feed>
